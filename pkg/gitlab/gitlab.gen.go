// Package gitlab provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package gitlab

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for APIEntitiesBulkImportStatus.
const (
	APIEntitiesBulkImportStatusCreated  APIEntitiesBulkImportStatus = "created"
	APIEntitiesBulkImportStatusFailed   APIEntitiesBulkImportStatus = "failed"
	APIEntitiesBulkImportStatusFinished APIEntitiesBulkImportStatus = "finished"
	APIEntitiesBulkImportStatusStarted  APIEntitiesBulkImportStatus = "started"
	APIEntitiesBulkImportStatusTimeout  APIEntitiesBulkImportStatus = "timeout"
)

// Defines values for APIEntitiesBulkImportsEntityType.
const (
	Group   APIEntitiesBulkImportsEntityType = "group"
	Project APIEntitiesBulkImportsEntityType = "project"
)

// Defines values for APIEntitiesBulkImportsStatus.
const (
	APIEntitiesBulkImportsStatusCreated  APIEntitiesBulkImportsStatus = "created"
	APIEntitiesBulkImportsStatusFailed   APIEntitiesBulkImportsStatus = "failed"
	APIEntitiesBulkImportsStatusFinished APIEntitiesBulkImportsStatus = "finished"
	APIEntitiesBulkImportsStatusStarted  APIEntitiesBulkImportsStatus = "started"
	APIEntitiesBulkImportsStatusTimeout  APIEntitiesBulkImportsStatus = "timeout"
)

// Defines values for GetApiV4AdminBatchedBackgroundMigrationsParamsDatabase.
const (
	GetApiV4AdminBatchedBackgroundMigrationsParamsDatabaseCi              GetApiV4AdminBatchedBackgroundMigrationsParamsDatabase = "ci"
	GetApiV4AdminBatchedBackgroundMigrationsParamsDatabaseEmbedding       GetApiV4AdminBatchedBackgroundMigrationsParamsDatabase = "embedding"
	GetApiV4AdminBatchedBackgroundMigrationsParamsDatabaseGeo             GetApiV4AdminBatchedBackgroundMigrationsParamsDatabase = "geo"
	GetApiV4AdminBatchedBackgroundMigrationsParamsDatabaseMain            GetApiV4AdminBatchedBackgroundMigrationsParamsDatabase = "main"
	GetApiV4AdminBatchedBackgroundMigrationsParamsDatabaseMainClusterwide GetApiV4AdminBatchedBackgroundMigrationsParamsDatabase = "main_clusterwide"
)

// Defines values for GetApiV4AdminBatchedBackgroundMigrationsIdParamsDatabase.
const (
	GetApiV4AdminBatchedBackgroundMigrationsIdParamsDatabaseCi              GetApiV4AdminBatchedBackgroundMigrationsIdParamsDatabase = "ci"
	GetApiV4AdminBatchedBackgroundMigrationsIdParamsDatabaseEmbedding       GetApiV4AdminBatchedBackgroundMigrationsIdParamsDatabase = "embedding"
	GetApiV4AdminBatchedBackgroundMigrationsIdParamsDatabaseGeo             GetApiV4AdminBatchedBackgroundMigrationsIdParamsDatabase = "geo"
	GetApiV4AdminBatchedBackgroundMigrationsIdParamsDatabaseMain            GetApiV4AdminBatchedBackgroundMigrationsIdParamsDatabase = "main"
	GetApiV4AdminBatchedBackgroundMigrationsIdParamsDatabaseMainClusterwide GetApiV4AdminBatchedBackgroundMigrationsIdParamsDatabase = "main_clusterwide"
)

// Defines values for PutApiV4AdminBatchedBackgroundMigrationsIdPauseJSONBodyDatabase.
const (
	PutApiV4AdminBatchedBackgroundMigrationsIdPauseJSONBodyDatabaseCi              PutApiV4AdminBatchedBackgroundMigrationsIdPauseJSONBodyDatabase = "ci"
	PutApiV4AdminBatchedBackgroundMigrationsIdPauseJSONBodyDatabaseEmbedding       PutApiV4AdminBatchedBackgroundMigrationsIdPauseJSONBodyDatabase = "embedding"
	PutApiV4AdminBatchedBackgroundMigrationsIdPauseJSONBodyDatabaseGeo             PutApiV4AdminBatchedBackgroundMigrationsIdPauseJSONBodyDatabase = "geo"
	PutApiV4AdminBatchedBackgroundMigrationsIdPauseJSONBodyDatabaseMain            PutApiV4AdminBatchedBackgroundMigrationsIdPauseJSONBodyDatabase = "main"
	PutApiV4AdminBatchedBackgroundMigrationsIdPauseJSONBodyDatabaseMainClusterwide PutApiV4AdminBatchedBackgroundMigrationsIdPauseJSONBodyDatabase = "main_clusterwide"
)

// Defines values for PutApiV4AdminBatchedBackgroundMigrationsIdResumeJSONBodyDatabase.
const (
	PutApiV4AdminBatchedBackgroundMigrationsIdResumeJSONBodyDatabaseCi              PutApiV4AdminBatchedBackgroundMigrationsIdResumeJSONBodyDatabase = "ci"
	PutApiV4AdminBatchedBackgroundMigrationsIdResumeJSONBodyDatabaseEmbedding       PutApiV4AdminBatchedBackgroundMigrationsIdResumeJSONBodyDatabase = "embedding"
	PutApiV4AdminBatchedBackgroundMigrationsIdResumeJSONBodyDatabaseGeo             PutApiV4AdminBatchedBackgroundMigrationsIdResumeJSONBodyDatabase = "geo"
	PutApiV4AdminBatchedBackgroundMigrationsIdResumeJSONBodyDatabaseMain            PutApiV4AdminBatchedBackgroundMigrationsIdResumeJSONBodyDatabase = "main"
	PutApiV4AdminBatchedBackgroundMigrationsIdResumeJSONBodyDatabaseMainClusterwide PutApiV4AdminBatchedBackgroundMigrationsIdResumeJSONBodyDatabase = "main_clusterwide"
)

// Defines values for PostApiV4AdminCiVariablesJSONBodyVariableType.
const (
	PostApiV4AdminCiVariablesJSONBodyVariableTypeEnvVar PostApiV4AdminCiVariablesJSONBodyVariableType = "env_var"
	PostApiV4AdminCiVariablesJSONBodyVariableTypeFile   PostApiV4AdminCiVariablesJSONBodyVariableType = "file"
)

// Defines values for PutApiV4AdminCiVariablesKeyJSONBodyVariableType.
const (
	PutApiV4AdminCiVariablesKeyJSONBodyVariableTypeEnvVar PutApiV4AdminCiVariablesKeyJSONBodyVariableType = "env_var"
	PutApiV4AdminCiVariablesKeyJSONBodyVariableTypeFile   PutApiV4AdminCiVariablesKeyJSONBodyVariableType = "file"
)

// Defines values for PostApiV4AdminClustersAddJSONBodyPlatformKubernetesAttributesAuthorizationType.
const (
	Abac                 PostApiV4AdminClustersAddJSONBodyPlatformKubernetesAttributesAuthorizationType = "abac"
	Rbac                 PostApiV4AdminClustersAddJSONBodyPlatformKubernetesAttributesAuthorizationType = "rbac"
	UnknownAuthorization PostApiV4AdminClustersAddJSONBodyPlatformKubernetesAttributesAuthorizationType = "unknown_authorization"
)

// Defines values for GetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableNameParamsDatabaseName.
const (
	GetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableNameParamsDatabaseNameCi   GetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableNameParamsDatabaseName = "ci"
	GetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableNameParamsDatabaseNameMain GetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableNameParamsDatabaseName = "main"
)

// Defines values for PostApiV4AdminMigrationsTimestampMarkJSONBodyDatabase.
const (
	PostApiV4AdminMigrationsTimestampMarkJSONBodyDatabaseCi              PostApiV4AdminMigrationsTimestampMarkJSONBodyDatabase = "ci"
	PostApiV4AdminMigrationsTimestampMarkJSONBodyDatabaseEmbedding       PostApiV4AdminMigrationsTimestampMarkJSONBodyDatabase = "embedding"
	PostApiV4AdminMigrationsTimestampMarkJSONBodyDatabaseGeo             PostApiV4AdminMigrationsTimestampMarkJSONBodyDatabase = "geo"
	PostApiV4AdminMigrationsTimestampMarkJSONBodyDatabaseMain            PostApiV4AdminMigrationsTimestampMarkJSONBodyDatabase = "main"
	PostApiV4AdminMigrationsTimestampMarkJSONBodyDatabaseMainClusterwide PostApiV4AdminMigrationsTimestampMarkJSONBodyDatabase = "main_clusterwide"
)

// Defines values for GetApiV4ApplicationPlanLimitsParamsPlanName.
const (
	GetApiV4ApplicationPlanLimitsParamsPlanNameBronze        GetApiV4ApplicationPlanLimitsParamsPlanName = "bronze"
	GetApiV4ApplicationPlanLimitsParamsPlanNameDefault       GetApiV4ApplicationPlanLimitsParamsPlanName = "default"
	GetApiV4ApplicationPlanLimitsParamsPlanNameFree          GetApiV4ApplicationPlanLimitsParamsPlanName = "free"
	GetApiV4ApplicationPlanLimitsParamsPlanNameGold          GetApiV4ApplicationPlanLimitsParamsPlanName = "gold"
	GetApiV4ApplicationPlanLimitsParamsPlanNameOpensource    GetApiV4ApplicationPlanLimitsParamsPlanName = "opensource"
	GetApiV4ApplicationPlanLimitsParamsPlanNamePremium       GetApiV4ApplicationPlanLimitsParamsPlanName = "premium"
	GetApiV4ApplicationPlanLimitsParamsPlanNamePremiumTrial  GetApiV4ApplicationPlanLimitsParamsPlanName = "premium_trial"
	GetApiV4ApplicationPlanLimitsParamsPlanNameSilver        GetApiV4ApplicationPlanLimitsParamsPlanName = "silver"
	GetApiV4ApplicationPlanLimitsParamsPlanNameUltimate      GetApiV4ApplicationPlanLimitsParamsPlanName = "ultimate"
	GetApiV4ApplicationPlanLimitsParamsPlanNameUltimateTrial GetApiV4ApplicationPlanLimitsParamsPlanName = "ultimate_trial"
)

// Defines values for PutApiV4ApplicationPlanLimitsJSONBodyPlanName.
const (
	PutApiV4ApplicationPlanLimitsJSONBodyPlanNameBronze        PutApiV4ApplicationPlanLimitsJSONBodyPlanName = "bronze"
	PutApiV4ApplicationPlanLimitsJSONBodyPlanNameDefault       PutApiV4ApplicationPlanLimitsJSONBodyPlanName = "default"
	PutApiV4ApplicationPlanLimitsJSONBodyPlanNameFree          PutApiV4ApplicationPlanLimitsJSONBodyPlanName = "free"
	PutApiV4ApplicationPlanLimitsJSONBodyPlanNameGold          PutApiV4ApplicationPlanLimitsJSONBodyPlanName = "gold"
	PutApiV4ApplicationPlanLimitsJSONBodyPlanNameOpensource    PutApiV4ApplicationPlanLimitsJSONBodyPlanName = "opensource"
	PutApiV4ApplicationPlanLimitsJSONBodyPlanNamePremium       PutApiV4ApplicationPlanLimitsJSONBodyPlanName = "premium"
	PutApiV4ApplicationPlanLimitsJSONBodyPlanNamePremiumTrial  PutApiV4ApplicationPlanLimitsJSONBodyPlanName = "premium_trial"
	PutApiV4ApplicationPlanLimitsJSONBodyPlanNameSilver        PutApiV4ApplicationPlanLimitsJSONBodyPlanName = "silver"
	PutApiV4ApplicationPlanLimitsJSONBodyPlanNameUltimate      PutApiV4ApplicationPlanLimitsJSONBodyPlanName = "ultimate"
	PutApiV4ApplicationPlanLimitsJSONBodyPlanNameUltimateTrial PutApiV4ApplicationPlanLimitsJSONBodyPlanName = "ultimate_trial"
)

// Defines values for PostApiV4BroadcastMessagesJSONBodyBroadcastType.
const (
	PostApiV4BroadcastMessagesJSONBodyBroadcastTypeBanner       PostApiV4BroadcastMessagesJSONBodyBroadcastType = "banner"
	PostApiV4BroadcastMessagesJSONBodyBroadcastTypeNotification PostApiV4BroadcastMessagesJSONBodyBroadcastType = "notification"
)

// Defines values for PostApiV4BroadcastMessagesJSONBodyTargetAccessLevels.
const (
	PostApiV4BroadcastMessagesJSONBodyTargetAccessLevelsN10 PostApiV4BroadcastMessagesJSONBodyTargetAccessLevels = 10
	PostApiV4BroadcastMessagesJSONBodyTargetAccessLevelsN20 PostApiV4BroadcastMessagesJSONBodyTargetAccessLevels = 20
	PostApiV4BroadcastMessagesJSONBodyTargetAccessLevelsN30 PostApiV4BroadcastMessagesJSONBodyTargetAccessLevels = 30
	PostApiV4BroadcastMessagesJSONBodyTargetAccessLevelsN40 PostApiV4BroadcastMessagesJSONBodyTargetAccessLevels = 40
	PostApiV4BroadcastMessagesJSONBodyTargetAccessLevelsN50 PostApiV4BroadcastMessagesJSONBodyTargetAccessLevels = 50
)

// Defines values for PutApiV4BroadcastMessagesIdJSONBodyBroadcastType.
const (
	PutApiV4BroadcastMessagesIdJSONBodyBroadcastTypeBanner       PutApiV4BroadcastMessagesIdJSONBodyBroadcastType = "banner"
	PutApiV4BroadcastMessagesIdJSONBodyBroadcastTypeNotification PutApiV4BroadcastMessagesIdJSONBodyBroadcastType = "notification"
)

// Defines values for PutApiV4BroadcastMessagesIdJSONBodyTargetAccessLevels.
const (
	PutApiV4BroadcastMessagesIdJSONBodyTargetAccessLevelsN10 PutApiV4BroadcastMessagesIdJSONBodyTargetAccessLevels = 10
	PutApiV4BroadcastMessagesIdJSONBodyTargetAccessLevelsN20 PutApiV4BroadcastMessagesIdJSONBodyTargetAccessLevels = 20
	PutApiV4BroadcastMessagesIdJSONBodyTargetAccessLevelsN30 PutApiV4BroadcastMessagesIdJSONBodyTargetAccessLevels = 30
	PutApiV4BroadcastMessagesIdJSONBodyTargetAccessLevelsN40 PutApiV4BroadcastMessagesIdJSONBodyTargetAccessLevels = 40
	PutApiV4BroadcastMessagesIdJSONBodyTargetAccessLevelsN50 PutApiV4BroadcastMessagesIdJSONBodyTargetAccessLevels = 50
)

// Defines values for GetApiV4BulkImportsParamsSort.
const (
	GetApiV4BulkImportsParamsSortAsc  GetApiV4BulkImportsParamsSort = "asc"
	GetApiV4BulkImportsParamsSortDesc GetApiV4BulkImportsParamsSort = "desc"
)

// Defines values for GetApiV4BulkImportsParamsStatus.
const (
	GetApiV4BulkImportsParamsStatusCreated  GetApiV4BulkImportsParamsStatus = "created"
	GetApiV4BulkImportsParamsStatusFailed   GetApiV4BulkImportsParamsStatus = "failed"
	GetApiV4BulkImportsParamsStatusFinished GetApiV4BulkImportsParamsStatus = "finished"
	GetApiV4BulkImportsParamsStatusStarted  GetApiV4BulkImportsParamsStatus = "started"
	GetApiV4BulkImportsParamsStatusTimeout  GetApiV4BulkImportsParamsStatus = "timeout"
)

// Defines values for PostApiV4BulkImportsFormdataBodyEntitiesSourceType.
const (
	GroupEntity   PostApiV4BulkImportsFormdataBodyEntitiesSourceType = "group_entity"
	ProjectEntity PostApiV4BulkImportsFormdataBodyEntitiesSourceType = "project_entity"
)

// Defines values for GetApiV4BulkImportsEntitiesParamsSort.
const (
	GetApiV4BulkImportsEntitiesParamsSortAsc  GetApiV4BulkImportsEntitiesParamsSort = "asc"
	GetApiV4BulkImportsEntitiesParamsSortDesc GetApiV4BulkImportsEntitiesParamsSort = "desc"
)

// Defines values for GetApiV4BulkImportsEntitiesParamsStatus.
const (
	GetApiV4BulkImportsEntitiesParamsStatusCreated  GetApiV4BulkImportsEntitiesParamsStatus = "created"
	GetApiV4BulkImportsEntitiesParamsStatusFailed   GetApiV4BulkImportsEntitiesParamsStatus = "failed"
	GetApiV4BulkImportsEntitiesParamsStatusFinished GetApiV4BulkImportsEntitiesParamsStatus = "finished"
	GetApiV4BulkImportsEntitiesParamsStatusStarted  GetApiV4BulkImportsEntitiesParamsStatus = "started"
	GetApiV4BulkImportsEntitiesParamsStatusTimeout  GetApiV4BulkImportsEntitiesParamsStatus = "timeout"
)

// Defines values for GetApiV4BulkImportsImportIdEntitiesParamsStatus.
const (
	Created  GetApiV4BulkImportsImportIdEntitiesParamsStatus = "created"
	Failed   GetApiV4BulkImportsImportIdEntitiesParamsStatus = "failed"
	Finished GetApiV4BulkImportsImportIdEntitiesParamsStatus = "finished"
	Started  GetApiV4BulkImportsImportIdEntitiesParamsStatus = "started"
	Timeout  GetApiV4BulkImportsImportIdEntitiesParamsStatus = "timeout"
)

// Defines values for GetApiV4ProjectsIdRepositoryBranchesParamsSort.
const (
	NameAsc     GetApiV4ProjectsIdRepositoryBranchesParamsSort = "name_asc"
	UpdatedAsc  GetApiV4ProjectsIdRepositoryBranchesParamsSort = "updated_asc"
	UpdatedDesc GetApiV4ProjectsIdRepositoryBranchesParamsSort = "updated_desc"
)

// APIEntitiesAccessRequester API_Entities_AccessRequester model
type APIEntitiesAccessRequester struct {
	AvatarPath       *string                       `json:"avatar_path,omitempty"`
	AvatarUrl        *string                       `json:"avatar_url,omitempty"`
	CustomAttributes *[]APIEntitiesCustomAttribute `json:"custom_attributes,omitempty"`
	Email            *string                       `json:"email,omitempty"`
	Id               *int32                        `json:"id,omitempty"`
	Name             *string                       `json:"name,omitempty"`
	RequestedAt      *string                       `json:"requested_at,omitempty"`
	State            *string                       `json:"state,omitempty"`
	Username         *string                       `json:"username,omitempty"`
	WebUrl           *string                       `json:"web_url,omitempty"`
}

// APIEntitiesAppearance API_Entities_Appearance model
type APIEntitiesAppearance struct {
	Description                 *string `json:"description,omitempty"`
	EmailHeaderAndFooterEnabled *string `json:"email_header_and_footer_enabled,omitempty"`
	Favicon                     *string `json:"favicon,omitempty"`
	FooterMessage               *string `json:"footer_message,omitempty"`
	HeaderLogo                  *string `json:"header_logo,omitempty"`
	HeaderMessage               *string `json:"header_message,omitempty"`
	Logo                        *string `json:"logo,omitempty"`
	MessageBackgroundColor      *string `json:"message_background_color,omitempty"`
	MessageFontColor            *string `json:"message_font_color,omitempty"`
	NewProjectGuidelines        *string `json:"new_project_guidelines,omitempty"`
	ProfileImageGuidelines      *string `json:"profile_image_guidelines,omitempty"`
	PwaDescription              *string `json:"pwa_description,omitempty"`
	PwaIcon                     *string `json:"pwa_icon,omitempty"`
	PwaName                     *string `json:"pwa_name,omitempty"`
	PwaShortName                *string `json:"pwa_short_name,omitempty"`
	Title                       *string `json:"title,omitempty"`
}

// APIEntitiesApplication API_Entities_Application model
type APIEntitiesApplication struct {
	ApplicationId   *string `json:"application_id,omitempty"`
	ApplicationName *string `json:"application_name,omitempty"`
	CallbackUrl     *string `json:"callback_url,omitempty"`
	Confidential    *bool   `json:"confidential,omitempty"`
	Id              *string `json:"id,omitempty"`
}

// APIEntitiesApplicationWithSecret API_Entities_ApplicationWithSecret model
type APIEntitiesApplicationWithSecret struct {
	ApplicationId   *string `json:"application_id,omitempty"`
	ApplicationName *string `json:"application_name,omitempty"`
	CallbackUrl     *string `json:"callback_url,omitempty"`
	Confidential    *bool   `json:"confidential,omitempty"`
	Id              *string `json:"id,omitempty"`
	Secret          *string `json:"secret,omitempty"`
}

// APIEntitiesAvatar API_Entities_Avatar model
type APIEntitiesAvatar struct {
	AvatarUrl *string `json:"avatar_url,omitempty"`
}

// APIEntitiesBadge API_Entities_Badge model
type APIEntitiesBadge struct {
	Id               *string `json:"id,omitempty"`
	ImageUrl         *string `json:"image_url,omitempty"`
	Kind             *string `json:"kind,omitempty"`
	LinkUrl          *string `json:"link_url,omitempty"`
	Name             *string `json:"name,omitempty"`
	RenderedImageUrl *string `json:"rendered_image_url,omitempty"`
	RenderedLinkUrl  *string `json:"rendered_link_url,omitempty"`
}

// APIEntitiesBasicBadgeDetails API_Entities_BasicBadgeDetails model
type APIEntitiesBasicBadgeDetails struct {
	ImageUrl         *string `json:"image_url,omitempty"`
	LinkUrl          *string `json:"link_url,omitempty"`
	Name             *string `json:"name,omitempty"`
	RenderedImageUrl *string `json:"rendered_image_url,omitempty"`
	RenderedLinkUrl  *string `json:"rendered_link_url,omitempty"`
}

// APIEntitiesBatchedBackgroundMigration API_Entities_BatchedBackgroundMigration model
type APIEntitiesBatchedBackgroundMigration struct {
	CreatedAt    *time.Time `json:"created_at,omitempty"`
	Id           *string    `json:"id,omitempty"`
	JobClassName *string    `json:"job_class_name,omitempty"`
	Progress     *float32   `json:"progress,omitempty"`
	Status       *string    `json:"status,omitempty"`
	TableName    *string    `json:"table_name,omitempty"`
}

// APIEntitiesBranch API_Entities_Branch model
type APIEntitiesBranch struct {
	CanPush            *bool              `json:"can_push,omitempty"`
	Commit             *APIEntitiesCommit `json:"commit,omitempty"`
	Default            *bool              `json:"default,omitempty"`
	DevelopersCanMerge *bool              `json:"developers_can_merge,omitempty"`
	DevelopersCanPush  *bool              `json:"developers_can_push,omitempty"`
	Merged             *bool              `json:"merged,omitempty"`
	Name               *string            `json:"name,omitempty"`
	Protected          *bool              `json:"protected,omitempty"`
	WebUrl             *string            `json:"web_url,omitempty"`
}

// APIEntitiesBroadcastMessage API_Entities_BroadcastMessage model
type APIEntitiesBroadcastMessage struct {
	Active             *string `json:"active,omitempty"`
	BroadcastType      *string `json:"broadcast_type,omitempty"`
	Color              *string `json:"color,omitempty"`
	Dismissable        *string `json:"dismissable,omitempty"`
	EndsAt             *string `json:"ends_at,omitempty"`
	Font               *string `json:"font,omitempty"`
	Id                 *string `json:"id,omitempty"`
	Message            *string `json:"message,omitempty"`
	StartsAt           *string `json:"starts_at,omitempty"`
	TargetAccessLevels *string `json:"target_access_levels,omitempty"`
	TargetPath         *string `json:"target_path,omitempty"`
}

// APIEntitiesBulkImport API_Entities_BulkImport model
type APIEntitiesBulkImport struct {
	CreatedAt  *time.Time                   `json:"created_at,omitempty"`
	Id         *int32                       `json:"id,omitempty"`
	SourceType *string                      `json:"source_type,omitempty"`
	Status     *APIEntitiesBulkImportStatus `json:"status,omitempty"`
	UpdatedAt  *time.Time                   `json:"updated_at,omitempty"`
}

// APIEntitiesBulkImportStatus defines model for APIEntitiesBulkImport.Status.
type APIEntitiesBulkImportStatus string

// APIEntitiesBulkImports API_Entities_BulkImports model
type APIEntitiesBulkImports struct {
	BulkImportId         *int32                                 `json:"bulk_import_id,omitempty"`
	CreatedAt            *time.Time                             `json:"created_at,omitempty"`
	DestinationFullPath  *string                                `json:"destination_full_path,omitempty"`
	DestinationName      *string                                `json:"destination_name,omitempty"`
	DestinationNamespace *string                                `json:"destination_namespace,omitempty"`
	DestinationSlug      *string                                `json:"destination_slug,omitempty"`
	EntityType           *APIEntitiesBulkImportsEntityType      `json:"entity_type,omitempty"`
	Failures             *[]APIEntitiesBulkImportsEntityFailure `json:"failures,omitempty"`
	Id                   *int32                                 `json:"id,omitempty"`
	MigrateProjects      *bool                                  `json:"migrate_projects,omitempty"`
	NamespaceId          *int32                                 `json:"namespace_id,omitempty"`
	ParentId             *int32                                 `json:"parent_id,omitempty"`
	ProjectId            *int32                                 `json:"project_id,omitempty"`
	SourceFullPath       *string                                `json:"source_full_path,omitempty"`
	Status               *APIEntitiesBulkImportsStatus          `json:"status,omitempty"`
	UpdatedAt            *time.Time                             `json:"updated_at,omitempty"`
}

// APIEntitiesBulkImportsEntityType defines model for APIEntitiesBulkImports.EntityType.
type APIEntitiesBulkImportsEntityType string

// APIEntitiesBulkImportsStatus defines model for APIEntitiesBulkImports.Status.
type APIEntitiesBulkImportsStatus string

// APIEntitiesBulkImportsEntityFailure defines model for API_Entities_BulkImports_EntityFailure.
type APIEntitiesBulkImportsEntityFailure struct {
	CorrelationIdValue *string    `json:"correlation_id_value,omitempty"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	ExceptionClass     *string    `json:"exception_class,omitempty"`
	ExceptionMessage   *string    `json:"exception_message,omitempty"`
	PipelineClass      *string    `json:"pipeline_class,omitempty"`
	PipelineStep       *string    `json:"pipeline_step,omitempty"`
	Relation           *string    `json:"relation,omitempty"`
	Step               *string    `json:"step,omitempty"`
}

// APIEntitiesCiVariable API_Entities_Ci_Variable model
type APIEntitiesCiVariable struct {
	EnvironmentScope *string `json:"environment_scope,omitempty"`
	Key              *string `json:"key,omitempty"`
	Masked           *bool   `json:"masked,omitempty"`
	Protected        *bool   `json:"protected,omitempty"`
	Raw              *bool   `json:"raw,omitempty"`
	Value            *string `json:"value,omitempty"`
	VariableType     *string `json:"variable_type,omitempty"`
}

// APIEntitiesCluster API_Entities_Cluster model
type APIEntitiesCluster struct {
	ClusterType             *string                        `json:"cluster_type,omitempty"`
	CreatedAt               *string                        `json:"created_at,omitempty"`
	Domain                  *string                        `json:"domain,omitempty"`
	Enabled                 *string                        `json:"enabled,omitempty"`
	EnvironmentScope        *string                        `json:"environment_scope,omitempty"`
	Id                      *string                        `json:"id,omitempty"`
	Managed                 *string                        `json:"managed,omitempty"`
	ManagementProject       *APIEntitiesProjectIdentity    `json:"management_project,omitempty"`
	Name                    *string                        `json:"name,omitempty"`
	NamespacePerEnvironment *string                        `json:"namespace_per_environment,omitempty"`
	PlatformKubernetes      *APIEntitiesPlatformKubernetes `json:"platform_kubernetes,omitempty"`
	PlatformType            *string                        `json:"platform_type,omitempty"`
	ProviderGcp             *APIEntitiesProviderGcp        `json:"provider_gcp,omitempty"`
	ProviderType            *string                        `json:"provider_type,omitempty"`
	User                    *APIEntitiesUserBasic          `json:"user,omitempty"`
}

// APIEntitiesCommit defines model for API_Entities_Commit.
type APIEntitiesCommit struct {
	AuthorEmail    *string                 `json:"author_email,omitempty"`
	AuthorName     *string                 `json:"author_name,omitempty"`
	AuthoredDate   *time.Time              `json:"authored_date,omitempty"`
	CommittedDate  *time.Time              `json:"committed_date,omitempty"`
	CommitterEmail *string                 `json:"committer_email,omitempty"`
	CommitterName  *string                 `json:"committer_name,omitempty"`
	CreatedAt      *time.Time              `json:"created_at,omitempty"`
	Id             *string                 `json:"id,omitempty"`
	Message        *string                 `json:"message,omitempty"`
	ParentIds      *[]string               `json:"parent_ids,omitempty"`
	ShortId        *string                 `json:"short_id,omitempty"`
	Title          *string                 `json:"title,omitempty"`
	Trailers       *map[string]interface{} `json:"trailers,omitempty"`
	WebUrl         *string                 `json:"web_url,omitempty"`
}

// APIEntitiesCustomAttribute defines model for API_Entities_CustomAttribute.
type APIEntitiesCustomAttribute struct {
	Key   *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}

// APIEntitiesDictionaryTable API_Entities_Dictionary_Table model
type APIEntitiesDictionaryTable struct {
	FeatureCategories *[]string `json:"feature_categories,omitempty"`
	TableName         *string   `json:"table_name,omitempty"`
}

// APIEntitiesMetadata API_Entities_Metadata model
type APIEntitiesMetadata struct {
	Enterprise *bool `json:"enterprise,omitempty"`
	Kas        *struct {
		Enabled     *bool   `json:"enabled,omitempty"`
		ExternalUrl *string `json:"externalUrl,omitempty"`
		Version     *string `json:"version,omitempty"`
	} `json:"kas,omitempty"`
	Revision *string `json:"revision,omitempty"`
	Version  *string `json:"version,omitempty"`
}

// APIEntitiesMetricImage API_Entities_MetricImage model
type APIEntitiesMetricImage struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	FilePath  *string    `json:"file_path,omitempty"`
	Filename  *string    `json:"filename,omitempty"`
	Id        *int32     `json:"id,omitempty"`
	Url       *string    `json:"url,omitempty"`
	UrlText   *string    `json:"url_text,omitempty"`
}

// APIEntitiesPlanLimit API_Entities_PlanLimit model
type APIEntitiesPlanLimit struct {
	CiActiveJobs               *int32                  `json:"ci_active_jobs,omitempty"`
	CiNeedsSizeLimit           *int32                  `json:"ci_needs_size_limit,omitempty"`
	CiPipelineSchedules        *int32                  `json:"ci_pipeline_schedules,omitempty"`
	CiPipelineSize             *int32                  `json:"ci_pipeline_size,omitempty"`
	CiProjectSubscriptions     *int32                  `json:"ci_project_subscriptions,omitempty"`
	CiRegisteredGroupRunners   *int32                  `json:"ci_registered_group_runners,omitempty"`
	CiRegisteredProjectRunners *int32                  `json:"ci_registered_project_runners,omitempty"`
	ConanMaxFileSize           *int32                  `json:"conan_max_file_size,omitempty"`
	EnforcementLimit           *int32                  `json:"enforcement_limit,omitempty"`
	GenericPackagesMaxFileSize *int32                  `json:"generic_packages_max_file_size,omitempty"`
	HelmMaxFileSize            *int32                  `json:"helm_max_file_size,omitempty"`
	LimitsHistory              *map[string]interface{} `json:"limits_history,omitempty"`
	MavenMaxFileSize           *int32                  `json:"maven_max_file_size,omitempty"`
	NotificationLimit          *int32                  `json:"notification_limit,omitempty"`
	NpmMaxFileSize             *int32                  `json:"npm_max_file_size,omitempty"`
	NugetMaxFileSize           *int32                  `json:"nuget_max_file_size,omitempty"`
	PipelineHierarchySize      *int32                  `json:"pipeline_hierarchy_size,omitempty"`
	PypiMaxFileSize            *int32                  `json:"pypi_max_file_size,omitempty"`
	StorageSizeLimit           *int32                  `json:"storage_size_limit,omitempty"`
	TerraformModuleMaxFileSize *int32                  `json:"terraform_module_max_file_size,omitempty"`
}

// APIEntitiesPlatformKubernetes defines model for API_Entities_Platform_Kubernetes.
type APIEntitiesPlatformKubernetes struct {
	ApiUrl            *string `json:"api_url,omitempty"`
	AuthorizationType *string `json:"authorization_type,omitempty"`
	CaCert            *string `json:"ca_cert,omitempty"`
	Namespace         *string `json:"namespace,omitempty"`
}

// APIEntitiesProjectIdentity defines model for API_Entities_ProjectIdentity.
type APIEntitiesProjectIdentity struct {
	CreatedAt         *time.Time `json:"created_at,omitempty"`
	Description       *string    `json:"description,omitempty"`
	Id                *int32     `json:"id,omitempty"`
	Name              *string    `json:"name,omitempty"`
	NameWithNamespace *string    `json:"name_with_namespace,omitempty"`
	Path              *string    `json:"path,omitempty"`
	PathWithNamespace *string    `json:"path_with_namespace,omitempty"`
}

// APIEntitiesProviderGcp defines model for API_Entities_Provider_Gcp.
type APIEntitiesProviderGcp struct {
	ClusterId    *string `json:"cluster_id,omitempty"`
	Endpoint     *string `json:"endpoint,omitempty"`
	GcpProjectId *string `json:"gcp_project_id,omitempty"`
	MachineType  *string `json:"machine_type,omitempty"`
	NumNodes     *string `json:"num_nodes,omitempty"`
	StatusName   *string `json:"status_name,omitempty"`
	Zone         *string `json:"zone,omitempty"`
}

// APIEntitiesUserBasic defines model for API_Entities_UserBasic.
type APIEntitiesUserBasic struct {
	AvatarPath       *string                       `json:"avatar_path,omitempty"`
	AvatarUrl        *string                       `json:"avatar_url,omitempty"`
	CustomAttributes *[]APIEntitiesCustomAttribute `json:"custom_attributes,omitempty"`
	Email            *string                       `json:"email,omitempty"`
	Id               *int32                        `json:"id,omitempty"`
	Name             *string                       `json:"name,omitempty"`
	State            *string                       `json:"state,omitempty"`
	Username         *string                       `json:"username,omitempty"`
	WebUrl           *string                       `json:"web_url,omitempty"`
}

// GetApiV4AdminBatchedBackgroundMigrationsParams defines parameters for GetApiV4AdminBatchedBackgroundMigrations.
type GetApiV4AdminBatchedBackgroundMigrationsParams struct {
	// Database The name of the database, the default `main`
	Database *GetApiV4AdminBatchedBackgroundMigrationsParamsDatabase `form:"database,omitempty" json:"database,omitempty"`
}

// GetApiV4AdminBatchedBackgroundMigrationsParamsDatabase defines parameters for GetApiV4AdminBatchedBackgroundMigrations.
type GetApiV4AdminBatchedBackgroundMigrationsParamsDatabase string

// GetApiV4AdminBatchedBackgroundMigrationsIdParams defines parameters for GetApiV4AdminBatchedBackgroundMigrationsId.
type GetApiV4AdminBatchedBackgroundMigrationsIdParams struct {
	// Database The name of the database
	Database *GetApiV4AdminBatchedBackgroundMigrationsIdParamsDatabase `form:"database,omitempty" json:"database,omitempty"`
}

// GetApiV4AdminBatchedBackgroundMigrationsIdParamsDatabase defines parameters for GetApiV4AdminBatchedBackgroundMigrationsId.
type GetApiV4AdminBatchedBackgroundMigrationsIdParamsDatabase string

// PutApiV4AdminBatchedBackgroundMigrationsIdPauseJSONBody defines parameters for PutApiV4AdminBatchedBackgroundMigrationsIdPause.
type PutApiV4AdminBatchedBackgroundMigrationsIdPauseJSONBody struct {
	// Database The name of the database
	Database *PutApiV4AdminBatchedBackgroundMigrationsIdPauseJSONBodyDatabase `json:"database,omitempty"`
}

// PutApiV4AdminBatchedBackgroundMigrationsIdPauseJSONBodyDatabase defines parameters for PutApiV4AdminBatchedBackgroundMigrationsIdPause.
type PutApiV4AdminBatchedBackgroundMigrationsIdPauseJSONBodyDatabase string

// PutApiV4AdminBatchedBackgroundMigrationsIdResumeJSONBody defines parameters for PutApiV4AdminBatchedBackgroundMigrationsIdResume.
type PutApiV4AdminBatchedBackgroundMigrationsIdResumeJSONBody struct {
	// Database The name of the database
	Database *PutApiV4AdminBatchedBackgroundMigrationsIdResumeJSONBodyDatabase `json:"database,omitempty"`
}

// PutApiV4AdminBatchedBackgroundMigrationsIdResumeJSONBodyDatabase defines parameters for PutApiV4AdminBatchedBackgroundMigrationsIdResume.
type PutApiV4AdminBatchedBackgroundMigrationsIdResumeJSONBodyDatabase string

// GetApiV4AdminCiVariablesParams defines parameters for GetApiV4AdminCiVariables.
type GetApiV4AdminCiVariablesParams struct {
	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// PostApiV4AdminCiVariablesJSONBody defines parameters for PostApiV4AdminCiVariables.
type PostApiV4AdminCiVariablesJSONBody struct {
	// Key The key of the variable. Max 255 characters
	Key string `json:"key"`

	// Masked Whether the variable is masked
	Masked *bool `json:"masked,omitempty"`

	// Protected Whether the variable is protected
	Protected *bool `json:"protected,omitempty"`

	// Raw Whether the variable will be expanded
	Raw *bool `json:"raw,omitempty"`

	// Value The value of a variable
	Value string `json:"value"`

	// VariableType The type of a variable. Available types are: env_var (default) and file
	VariableType *PostApiV4AdminCiVariablesJSONBodyVariableType `json:"variable_type,omitempty"`
}

// PostApiV4AdminCiVariablesJSONBodyVariableType defines parameters for PostApiV4AdminCiVariables.
type PostApiV4AdminCiVariablesJSONBodyVariableType string

// PutApiV4AdminCiVariablesKeyJSONBody defines parameters for PutApiV4AdminCiVariablesKey.
type PutApiV4AdminCiVariablesKeyJSONBody struct {
	// Masked Whether the variable is masked
	Masked *bool `json:"masked,omitempty"`

	// Protected Whether the variable is protected
	Protected *bool `json:"protected,omitempty"`

	// Raw Whether the variable will be expanded
	Raw *bool `json:"raw,omitempty"`

	// Value The value of a variable
	Value *string `json:"value,omitempty"`

	// VariableType The type of a variable. Available types are: env_var (default) and file
	VariableType *PutApiV4AdminCiVariablesKeyJSONBodyVariableType `json:"variable_type,omitempty"`
}

// PutApiV4AdminCiVariablesKeyJSONBodyVariableType defines parameters for PutApiV4AdminCiVariablesKey.
type PutApiV4AdminCiVariablesKeyJSONBodyVariableType string

// PostApiV4AdminClustersAddJSONBody defines parameters for PostApiV4AdminClustersAdd.
type PostApiV4AdminClustersAddJSONBody struct {
	// Domain Cluster base domain
	Domain *string `json:"domain,omitempty"`

	// Enabled Determines if cluster is active or not, defaults to true
	Enabled *bool `json:"enabled,omitempty"`

	// EnvironmentScope The associated environment to the cluster
	EnvironmentScope *string `json:"environment_scope,omitempty"`

	// Managed Determines if GitLab will manage namespaces and service accounts for this cluster, defaults to true
	Managed *bool `json:"managed,omitempty"`

	// ManagementProjectId The ID of the management project
	ManagementProjectId *int32 `json:"management_project_id,omitempty"`

	// Name Cluster name
	Name string `json:"name"`

	// NamespacePerEnvironment Deploy each environment to a separate Kubernetes namespace
	NamespacePerEnvironment *bool `json:"namespace_per_environment,omitempty"`

	// PlatformKubernetesAttributesApiUrl URL to access the Kubernetes API
	PlatformKubernetesAttributesApiUrl string `json:"platform_kubernetes_attributes[api_url]"`

	// PlatformKubernetesAttributesAuthorizationType Cluster authorization type, defaults to RBAC
	PlatformKubernetesAttributesAuthorizationType *PostApiV4AdminClustersAddJSONBodyPlatformKubernetesAttributesAuthorizationType `json:"platform_kubernetes_attributes[authorization_type],omitempty"`

	// PlatformKubernetesAttributesCaCert TLS certificate (needed if API is using a self-signed TLS certificate)
	PlatformKubernetesAttributesCaCert *string `json:"platform_kubernetes_attributes[ca_cert],omitempty"`

	// PlatformKubernetesAttributesNamespace Unique namespace related to Project
	PlatformKubernetesAttributesNamespace *string `json:"platform_kubernetes_attributes[namespace],omitempty"`

	// PlatformKubernetesAttributesToken Token to authenticate against Kubernetes
	PlatformKubernetesAttributesToken string `json:"platform_kubernetes_attributes[token]"`
}

// PostApiV4AdminClustersAddJSONBodyPlatformKubernetesAttributesAuthorizationType defines parameters for PostApiV4AdminClustersAdd.
type PostApiV4AdminClustersAddJSONBodyPlatformKubernetesAttributesAuthorizationType string

// PutApiV4AdminClustersClusterIdJSONBody defines parameters for PutApiV4AdminClustersClusterId.
type PutApiV4AdminClustersClusterIdJSONBody struct {
	// Domain Cluster base domain
	Domain *string `json:"domain,omitempty"`

	// Enabled Enable or disable Gitlab's connection to your Kubernetes cluster
	Enabled *bool `json:"enabled,omitempty"`

	// EnvironmentScope The associated environment to the cluster
	EnvironmentScope *string `json:"environment_scope,omitempty"`

	// Managed Determines if GitLab will manage namespaces and service accounts for this cluster
	Managed *bool `json:"managed,omitempty"`

	// ManagementProjectId The ID of the management project
	ManagementProjectId *int32 `json:"management_project_id,omitempty"`

	// Name Cluster name
	Name *string `json:"name,omitempty"`

	// NamespacePerEnvironment Deploy each environment to a separate Kubernetes namespace
	NamespacePerEnvironment *bool `json:"namespace_per_environment,omitempty"`

	// PlatformKubernetesAttributesApiUrl URL to access the Kubernetes API
	PlatformKubernetesAttributesApiUrl *string `json:"platform_kubernetes_attributes[api_url],omitempty"`

	// PlatformKubernetesAttributesCaCert TLS certificate (needed if API is using a self-signed TLS certificate)
	PlatformKubernetesAttributesCaCert *string `json:"platform_kubernetes_attributes[ca_cert],omitempty"`

	// PlatformKubernetesAttributesNamespace Unique namespace related to Project
	PlatformKubernetesAttributesNamespace *string `json:"platform_kubernetes_attributes[namespace],omitempty"`

	// PlatformKubernetesAttributesToken Token to authenticate against Kubernetes
	PlatformKubernetesAttributesToken *string `json:"platform_kubernetes_attributes[token],omitempty"`
}

// GetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableNameParamsDatabaseName defines parameters for GetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableName.
type GetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableNameParamsDatabaseName string

// PostApiV4AdminMigrationsTimestampMarkJSONBody defines parameters for PostApiV4AdminMigrationsTimestampMark.
type PostApiV4AdminMigrationsTimestampMarkJSONBody struct {
	// Database The name of the database
	Database *PostApiV4AdminMigrationsTimestampMarkJSONBodyDatabase `json:"database,omitempty"`
}

// PostApiV4AdminMigrationsTimestampMarkJSONBodyDatabase defines parameters for PostApiV4AdminMigrationsTimestampMark.
type PostApiV4AdminMigrationsTimestampMarkJSONBodyDatabase string

// PutApiV4ApplicationAppearanceMultipartBody defines parameters for PutApiV4ApplicationAppearance.
type PutApiV4ApplicationAppearanceMultipartBody struct {
	// Description Markdown text shown on the sign in / sign up page
	Description *string `json:"description,omitempty"`

	// EmailHeaderAndFooterEnabled Add header and footer to all outgoing emails if enabled
	EmailHeaderAndFooterEnabled *bool `json:"email_header_and_footer_enabled,omitempty"`

	// Favicon Instance favicon in .ico/.png format
	Favicon *openapi_types.File `json:"favicon,omitempty"`

	// FooterMessage Message within the system footer bar
	FooterMessage *string `json:"footer_message,omitempty"`

	// HeaderLogo Instance image used for the main navigation bar
	HeaderLogo *openapi_types.File `json:"header_logo,omitempty"`

	// HeaderMessage Message within the system header bar
	HeaderMessage *string `json:"header_message,omitempty"`

	// Logo Instance image used on the sign in / sign up page
	Logo *openapi_types.File `json:"logo,omitempty"`

	// MessageBackgroundColor Background color for the system header / footer bar
	MessageBackgroundColor *string `json:"message_background_color,omitempty"`

	// MessageFontColor Font color for the system header / footer bar
	MessageFontColor *string `json:"message_font_color,omitempty"`

	// NewProjectGuidelines Markdown text shown on the new project page
	NewProjectGuidelines *string `json:"new_project_guidelines,omitempty"`

	// ProfileImageGuidelines Markdown text shown on the profile page below Public Avatar
	ProfileImageGuidelines *string `json:"profile_image_guidelines,omitempty"`

	// PwaDescription An explanation of what the Progressive Web App does
	PwaDescription *string `json:"pwa_description,omitempty"`

	// PwaIcon Icon used for Progressive Web App
	PwaIcon *openapi_types.File `json:"pwa_icon,omitempty"`

	// PwaName Name of the Progressive Web App
	PwaName *string `json:"pwa_name,omitempty"`

	// PwaShortName Optional, short name for Progressive Web App
	PwaShortName *string `json:"pwa_short_name,omitempty"`

	// Title Instance title on the sign in / sign up page
	Title *string `json:"title,omitempty"`
}

// GetApiV4ApplicationPlanLimitsParams defines parameters for GetApiV4ApplicationPlanLimits.
type GetApiV4ApplicationPlanLimitsParams struct {
	// PlanName Name of the plan to get the limits from. Default: default.
	PlanName *GetApiV4ApplicationPlanLimitsParamsPlanName `form:"plan_name,omitempty" json:"plan_name,omitempty"`
}

// GetApiV4ApplicationPlanLimitsParamsPlanName defines parameters for GetApiV4ApplicationPlanLimits.
type GetApiV4ApplicationPlanLimitsParamsPlanName string

// PutApiV4ApplicationPlanLimitsJSONBody defines parameters for PutApiV4ApplicationPlanLimits.
type PutApiV4ApplicationPlanLimitsJSONBody struct {
	// CiActiveJobs Total number of jobs in currently active pipelines
	CiActiveJobs *int32 `json:"ci_active_jobs,omitempty"`

	// CiNeedsSizeLimit Maximum number of DAG dependencies that a job can have
	CiNeedsSizeLimit *int32 `json:"ci_needs_size_limit,omitempty"`

	// CiPipelineSchedules Maximum number of pipeline schedules
	CiPipelineSchedules *int32 `json:"ci_pipeline_schedules,omitempty"`

	// CiPipelineSize Maximum number of jobs in a single pipeline
	CiPipelineSize *int32 `json:"ci_pipeline_size,omitempty"`

	// CiProjectSubscriptions Maximum number of pipeline subscriptions to and from a project
	CiProjectSubscriptions *int32 `json:"ci_project_subscriptions,omitempty"`

	// CiRegisteredGroupRunners Maximum number of runners registered per group
	CiRegisteredGroupRunners *int32 `json:"ci_registered_group_runners,omitempty"`

	// CiRegisteredProjectRunners Maximum number of runners registered per project
	CiRegisteredProjectRunners *int32 `json:"ci_registered_project_runners,omitempty"`

	// ConanMaxFileSize Maximum Conan package file size in bytes
	ConanMaxFileSize *int32 `json:"conan_max_file_size,omitempty"`

	// EnforcementLimit Maximum storage size for the root namespace enforcement in MiB
	EnforcementLimit *int32 `json:"enforcement_limit,omitempty"`

	// GenericPackagesMaxFileSize Maximum generic package file size in bytes
	GenericPackagesMaxFileSize *int32 `json:"generic_packages_max_file_size,omitempty"`

	// HelmMaxFileSize Maximum Helm chart file size in bytes
	HelmMaxFileSize *int32 `json:"helm_max_file_size,omitempty"`

	// MavenMaxFileSize Maximum Maven package file size in bytes
	MavenMaxFileSize *int32 `json:"maven_max_file_size,omitempty"`

	// NotificationLimit Maximum storage size for the root namespace notifications in MiB
	NotificationLimit *int32 `json:"notification_limit,omitempty"`

	// NpmMaxFileSize Maximum NPM package file size in bytes
	NpmMaxFileSize *int32 `json:"npm_max_file_size,omitempty"`

	// NugetMaxFileSize Maximum NuGet package file size in bytes
	NugetMaxFileSize *int32 `json:"nuget_max_file_size,omitempty"`

	// PipelineHierarchySize Maximum number of downstream pipelines in a pipeline's hierarchy tree
	PipelineHierarchySize *int32 `json:"pipeline_hierarchy_size,omitempty"`

	// PlanName Name of the plan to update
	PlanName PutApiV4ApplicationPlanLimitsJSONBodyPlanName `json:"plan_name"`

	// PypiMaxFileSize Maximum PyPI package file size in bytes
	PypiMaxFileSize *int32 `json:"pypi_max_file_size,omitempty"`

	// StorageSizeLimit Maximum storage size for the root namespace in MiB
	StorageSizeLimit *int32 `json:"storage_size_limit,omitempty"`

	// TerraformModuleMaxFileSize Maximum Terraform Module package file size in bytes
	TerraformModuleMaxFileSize *int32 `json:"terraform_module_max_file_size,omitempty"`
}

// PutApiV4ApplicationPlanLimitsJSONBodyPlanName defines parameters for PutApiV4ApplicationPlanLimits.
type PutApiV4ApplicationPlanLimitsJSONBodyPlanName string

// PostApiV4ApplicationsJSONBody defines parameters for PostApiV4Applications.
type PostApiV4ApplicationsJSONBody struct {
	// Confidential The application is used where the client secret can be kept confidential. Native mobile apps \
	//                         and Single Page Apps are considered non-confidential. Defaults to true if not supplied
	Confidential *bool `json:"confidential,omitempty"`

	// Name Name of the application.
	Name string `json:"name"`

	// RedirectUri Redirect URI of the application.
	RedirectUri string `json:"redirect_uri"`

	// Scopes Scopes of the application. You can specify multiple scopes by separating\
	//                                  each scope using a space
	Scopes string `json:"scopes"`
}

// GetApiV4AvatarParams defines parameters for GetApiV4Avatar.
type GetApiV4AvatarParams struct {
	// Email Public email address of the user
	Email string `form:"email" json:"email"`

	// Size Single pixel dimension for Gravatar images
	Size *int32 `form:"size,omitempty" json:"size,omitempty"`
}

// GetApiV4BroadcastMessagesParams defines parameters for GetApiV4BroadcastMessages.
type GetApiV4BroadcastMessagesParams struct {
	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// PostApiV4BroadcastMessagesJSONBody defines parameters for PostApiV4BroadcastMessages.
type PostApiV4BroadcastMessagesJSONBody struct {
	// BroadcastType Broadcast type. Defaults to banner
	BroadcastType *PostApiV4BroadcastMessagesJSONBodyBroadcastType `json:"broadcast_type,omitempty"`

	// Color Background color
	Color *string `json:"color,omitempty"`

	// Dismissable Is dismissable
	Dismissable *bool `json:"dismissable,omitempty"`

	// EndsAt Ending time
	EndsAt *time.Time `json:"ends_at,omitempty"`

	// Font Foreground color
	Font *string `json:"font,omitempty"`

	// Message Message to display
	Message string `json:"message"`

	// StartsAt Starting time
	StartsAt *time.Time `json:"starts_at,omitempty"`

	// TargetAccessLevels Target user roles
	TargetAccessLevels *[]PostApiV4BroadcastMessagesJSONBodyTargetAccessLevels `json:"target_access_levels,omitempty"`

	// TargetPath Target path
	TargetPath *string `json:"target_path,omitempty"`
}

// PostApiV4BroadcastMessagesJSONBodyBroadcastType defines parameters for PostApiV4BroadcastMessages.
type PostApiV4BroadcastMessagesJSONBodyBroadcastType string

// PostApiV4BroadcastMessagesJSONBodyTargetAccessLevels defines parameters for PostApiV4BroadcastMessages.
type PostApiV4BroadcastMessagesJSONBodyTargetAccessLevels int32

// PutApiV4BroadcastMessagesIdJSONBody defines parameters for PutApiV4BroadcastMessagesId.
type PutApiV4BroadcastMessagesIdJSONBody struct {
	// BroadcastType Broadcast Type
	BroadcastType *PutApiV4BroadcastMessagesIdJSONBodyBroadcastType `json:"broadcast_type,omitempty"`

	// Color Background color
	Color *string `json:"color,omitempty"`

	// Dismissable Is dismissable
	Dismissable *bool `json:"dismissable,omitempty"`

	// EndsAt Ending time
	EndsAt *time.Time `json:"ends_at,omitempty"`

	// Font Foreground color
	Font *string `json:"font,omitempty"`

	// Message Message to display
	Message *string `json:"message,omitempty"`

	// StartsAt Starting time
	StartsAt *time.Time `json:"starts_at,omitempty"`

	// TargetAccessLevels Target user roles
	TargetAccessLevels *[]PutApiV4BroadcastMessagesIdJSONBodyTargetAccessLevels `json:"target_access_levels,omitempty"`

	// TargetPath Target path
	TargetPath *string `json:"target_path,omitempty"`
}

// PutApiV4BroadcastMessagesIdJSONBodyBroadcastType defines parameters for PutApiV4BroadcastMessagesId.
type PutApiV4BroadcastMessagesIdJSONBodyBroadcastType string

// PutApiV4BroadcastMessagesIdJSONBodyTargetAccessLevels defines parameters for PutApiV4BroadcastMessagesId.
type PutApiV4BroadcastMessagesIdJSONBodyTargetAccessLevels int32

// GetApiV4BulkImportsParams defines parameters for GetApiV4BulkImports.
type GetApiV4BulkImportsParams struct {
	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Sort Return GitLab Migrations sorted in created by `asc` or `desc` order.
	Sort *GetApiV4BulkImportsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Status Return GitLab Migrations with specified status
	Status *GetApiV4BulkImportsParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// GetApiV4BulkImportsParamsSort defines parameters for GetApiV4BulkImports.
type GetApiV4BulkImportsParamsSort string

// GetApiV4BulkImportsParamsStatus defines parameters for GetApiV4BulkImports.
type GetApiV4BulkImportsParamsStatus string

// PostApiV4BulkImportsFormdataBody defines parameters for PostApiV4BulkImports.
type PostApiV4BulkImportsFormdataBody struct {
	// ConfigurationAccessToken Access token to the source GitLab instance
	ConfigurationAccessToken string `form:"configuration[access_token]" json:"configuration[access_token]"`

	// ConfigurationUrl Source GitLab instance URL
	ConfigurationUrl string `form:"configuration[url]" json:"configuration[url]"`

	// EntitiesDestinationName Deprecated: Use :destination_slug instead. Destination slug for the entity
	EntitiesDestinationName *[]string `form:"entities[destination_name],omitempty" json:"entities[destination_name],omitempty"`

	// EntitiesDestinationNamespace Destination namespace for the entity
	EntitiesDestinationNamespace []string `form:"entities[destination_namespace]" json:"entities[destination_namespace]"`

	// EntitiesDestinationSlug Destination slug for the entity
	EntitiesDestinationSlug *[]string `form:"entities[destination_slug],omitempty" json:"entities[destination_slug],omitempty"`

	// EntitiesMigrateProjects Indicates group migration should include nested projects
	EntitiesMigrateProjects *[]bool `form:"entities[migrate_projects],omitempty" json:"entities[migrate_projects],omitempty"`

	// EntitiesSourceFullPath Relative path of the source entity to import
	EntitiesSourceFullPath []string `form:"entities[source_full_path]" json:"entities[source_full_path]"`

	// EntitiesSourceType Source entity type
	EntitiesSourceType []PostApiV4BulkImportsFormdataBodyEntitiesSourceType `form:"entities[source_type]" json:"entities[source_type]"`
}

// PostApiV4BulkImportsFormdataBodyEntitiesSourceType defines parameters for PostApiV4BulkImports.
type PostApiV4BulkImportsFormdataBodyEntitiesSourceType string

// GetApiV4BulkImportsEntitiesParams defines parameters for GetApiV4BulkImportsEntities.
type GetApiV4BulkImportsEntitiesParams struct {
	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Sort Return GitLab Migrations sorted in created by `asc` or `desc` order.
	Sort *GetApiV4BulkImportsEntitiesParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Status Return all GitLab Migrations' entities with specified status
	Status *GetApiV4BulkImportsEntitiesParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// GetApiV4BulkImportsEntitiesParamsSort defines parameters for GetApiV4BulkImportsEntities.
type GetApiV4BulkImportsEntitiesParamsSort string

// GetApiV4BulkImportsEntitiesParamsStatus defines parameters for GetApiV4BulkImportsEntities.
type GetApiV4BulkImportsEntitiesParamsStatus string

// GetApiV4BulkImportsImportIdEntitiesParams defines parameters for GetApiV4BulkImportsImportIdEntities.
type GetApiV4BulkImportsImportIdEntitiesParams struct {
	// Status Return import entities with specified status
	Status *GetApiV4BulkImportsImportIdEntitiesParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// GetApiV4BulkImportsImportIdEntitiesParamsStatus defines parameters for GetApiV4BulkImportsImportIdEntities.
type GetApiV4BulkImportsImportIdEntitiesParamsStatus string

// GetApiV4GroupsIdAccessRequestsParams defines parameters for GetApiV4GroupsIdAccessRequests.
type GetApiV4GroupsIdAccessRequestsParams struct {
	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// PutApiV4GroupsIdAccessRequestsUserIdApproveJSONBody defines parameters for PutApiV4GroupsIdAccessRequestsUserIdApprove.
type PutApiV4GroupsIdAccessRequestsUserIdApproveJSONBody struct {
	// AccessLevel A valid access level (defaults: `30`, the Developer role)
	AccessLevel *int32 `json:"access_level,omitempty"`
}

// GetApiV4GroupsIdBadgesParams defines parameters for GetApiV4GroupsIdBadges.
type GetApiV4GroupsIdBadgesParams struct {
	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Name Name for the badge
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// PostApiV4GroupsIdBadgesJSONBody defines parameters for PostApiV4GroupsIdBadges.
type PostApiV4GroupsIdBadgesJSONBody struct {
	// ImageUrl URL of the badge image
	ImageUrl string `json:"image_url"`

	// LinkUrl URL of the badge link
	LinkUrl string `json:"link_url"`

	// Name Name for the badge
	Name *string `json:"name,omitempty"`
}

// GetApiV4GroupsIdBadgesRenderParams defines parameters for GetApiV4GroupsIdBadgesRender.
type GetApiV4GroupsIdBadgesRenderParams struct {
	// LinkUrl URL of the badge link
	LinkUrl string `form:"link_url" json:"link_url"`

	// ImageUrl URL of the badge image
	ImageUrl string `form:"image_url" json:"image_url"`
}

// PutApiV4GroupsIdBadgesBadgeIdJSONBody defines parameters for PutApiV4GroupsIdBadgesBadgeId.
type PutApiV4GroupsIdBadgesBadgeIdJSONBody struct {
	// ImageUrl URL of the badge image
	ImageUrl *string `json:"image_url,omitempty"`

	// LinkUrl URL of the badge link
	LinkUrl *string `json:"link_url,omitempty"`

	// Name Name for the badge
	Name *string `json:"name,omitempty"`
}

// GetApiV4ProjectsIdAccessRequestsParams defines parameters for GetApiV4ProjectsIdAccessRequests.
type GetApiV4ProjectsIdAccessRequestsParams struct {
	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// PutApiV4ProjectsIdAccessRequestsUserIdApproveJSONBody defines parameters for PutApiV4ProjectsIdAccessRequestsUserIdApprove.
type PutApiV4ProjectsIdAccessRequestsUserIdApproveJSONBody struct {
	// AccessLevel A valid access level (defaults: `30`, the Developer role)
	AccessLevel *int32 `json:"access_level,omitempty"`
}

// PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMultipartBody defines parameters for PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImages.
type PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMultipartBody struct {
	// File The image file to be uploaded
	File openapi_types.File `json:"file"`

	// Url The url to view more metric info
	Url *string `json:"url,omitempty"`

	// UrlText A description of the image or URL
	UrlText *string `json:"url_text,omitempty"`
}

// PutApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdMultipartBody defines parameters for PutApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageId.
type PutApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdMultipartBody struct {
	// Url The url to view more metric info
	Url *string `json:"url,omitempty"`

	// UrlText A description of the image or URL
	UrlText *string `json:"url_text,omitempty"`
}

// GetApiV4ProjectsIdBadgesParams defines parameters for GetApiV4ProjectsIdBadges.
type GetApiV4ProjectsIdBadgesParams struct {
	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Name Name for the badge
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// PostApiV4ProjectsIdBadgesJSONBody defines parameters for PostApiV4ProjectsIdBadges.
type PostApiV4ProjectsIdBadgesJSONBody struct {
	// ImageUrl URL of the badge image
	ImageUrl string `json:"image_url"`

	// LinkUrl URL of the badge link
	LinkUrl string `json:"link_url"`

	// Name Name for the badge
	Name *string `json:"name,omitempty"`
}

// GetApiV4ProjectsIdBadgesRenderParams defines parameters for GetApiV4ProjectsIdBadgesRender.
type GetApiV4ProjectsIdBadgesRenderParams struct {
	// LinkUrl URL of the badge link
	LinkUrl string `form:"link_url" json:"link_url"`

	// ImageUrl URL of the badge image
	ImageUrl string `form:"image_url" json:"image_url"`
}

// PutApiV4ProjectsIdBadgesBadgeIdJSONBody defines parameters for PutApiV4ProjectsIdBadgesBadgeId.
type PutApiV4ProjectsIdBadgesBadgeIdJSONBody struct {
	// ImageUrl URL of the badge image
	ImageUrl *string `json:"image_url,omitempty"`

	// LinkUrl URL of the badge link
	LinkUrl *string `json:"link_url,omitempty"`

	// Name Name for the badge
	Name *string `json:"name,omitempty"`
}

// GetApiV4ProjectsIdRepositoryBranchesParams defines parameters for GetApiV4ProjectsIdRepositoryBranches.
type GetApiV4ProjectsIdRepositoryBranchesParams struct {
	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Search Return list of branches matching the search criteria
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Regex Return list of branches matching the regex
	Regex *string `form:"regex,omitempty" json:"regex,omitempty"`

	// Sort Return list of branches sorted by the given field
	Sort *GetApiV4ProjectsIdRepositoryBranchesParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// PageToken Name of branch to start the pagination from
	PageToken *string `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// GetApiV4ProjectsIdRepositoryBranchesParamsSort defines parameters for GetApiV4ProjectsIdRepositoryBranches.
type GetApiV4ProjectsIdRepositoryBranchesParamsSort string

// PostApiV4ProjectsIdRepositoryBranchesJSONBody defines parameters for PostApiV4ProjectsIdRepositoryBranches.
type PostApiV4ProjectsIdRepositoryBranchesJSONBody struct {
	// Branch The name of the branch
	Branch string `json:"branch"`

	// Ref Create branch from commit sha or existing branch
	Ref string `json:"ref"`
}

// PutApiV4ProjectsIdRepositoryBranchesBranchProtectJSONBody defines parameters for PutApiV4ProjectsIdRepositoryBranchesBranchProtect.
type PutApiV4ProjectsIdRepositoryBranchesBranchProtectJSONBody struct {
	// DevelopersCanMerge Flag if developers can merge to that branch
	DevelopersCanMerge *bool `json:"developers_can_merge,omitempty"`

	// DevelopersCanPush Flag if developers can push to that branch
	DevelopersCanPush *bool `json:"developers_can_push,omitempty"`
}

// PutApiV4AdminBatchedBackgroundMigrationsIdPauseJSONRequestBody defines body for PutApiV4AdminBatchedBackgroundMigrationsIdPause for application/json ContentType.
type PutApiV4AdminBatchedBackgroundMigrationsIdPauseJSONRequestBody PutApiV4AdminBatchedBackgroundMigrationsIdPauseJSONBody

// PutApiV4AdminBatchedBackgroundMigrationsIdResumeJSONRequestBody defines body for PutApiV4AdminBatchedBackgroundMigrationsIdResume for application/json ContentType.
type PutApiV4AdminBatchedBackgroundMigrationsIdResumeJSONRequestBody PutApiV4AdminBatchedBackgroundMigrationsIdResumeJSONBody

// PostApiV4AdminCiVariablesJSONRequestBody defines body for PostApiV4AdminCiVariables for application/json ContentType.
type PostApiV4AdminCiVariablesJSONRequestBody PostApiV4AdminCiVariablesJSONBody

// PutApiV4AdminCiVariablesKeyJSONRequestBody defines body for PutApiV4AdminCiVariablesKey for application/json ContentType.
type PutApiV4AdminCiVariablesKeyJSONRequestBody PutApiV4AdminCiVariablesKeyJSONBody

// PostApiV4AdminClustersAddJSONRequestBody defines body for PostApiV4AdminClustersAdd for application/json ContentType.
type PostApiV4AdminClustersAddJSONRequestBody PostApiV4AdminClustersAddJSONBody

// PutApiV4AdminClustersClusterIdJSONRequestBody defines body for PutApiV4AdminClustersClusterId for application/json ContentType.
type PutApiV4AdminClustersClusterIdJSONRequestBody PutApiV4AdminClustersClusterIdJSONBody

// PostApiV4AdminMigrationsTimestampMarkJSONRequestBody defines body for PostApiV4AdminMigrationsTimestampMark for application/json ContentType.
type PostApiV4AdminMigrationsTimestampMarkJSONRequestBody PostApiV4AdminMigrationsTimestampMarkJSONBody

// PutApiV4ApplicationAppearanceMultipartRequestBody defines body for PutApiV4ApplicationAppearance for multipart/form-data ContentType.
type PutApiV4ApplicationAppearanceMultipartRequestBody PutApiV4ApplicationAppearanceMultipartBody

// PutApiV4ApplicationPlanLimitsJSONRequestBody defines body for PutApiV4ApplicationPlanLimits for application/json ContentType.
type PutApiV4ApplicationPlanLimitsJSONRequestBody PutApiV4ApplicationPlanLimitsJSONBody

// PostApiV4ApplicationsJSONRequestBody defines body for PostApiV4Applications for application/json ContentType.
type PostApiV4ApplicationsJSONRequestBody PostApiV4ApplicationsJSONBody

// PostApiV4BroadcastMessagesJSONRequestBody defines body for PostApiV4BroadcastMessages for application/json ContentType.
type PostApiV4BroadcastMessagesJSONRequestBody PostApiV4BroadcastMessagesJSONBody

// PutApiV4BroadcastMessagesIdJSONRequestBody defines body for PutApiV4BroadcastMessagesId for application/json ContentType.
type PutApiV4BroadcastMessagesIdJSONRequestBody PutApiV4BroadcastMessagesIdJSONBody

// PostApiV4BulkImportsFormdataRequestBody defines body for PostApiV4BulkImports for application/x-www-form-urlencoded ContentType.
type PostApiV4BulkImportsFormdataRequestBody PostApiV4BulkImportsFormdataBody

// PutApiV4GroupsIdAccessRequestsUserIdApproveJSONRequestBody defines body for PutApiV4GroupsIdAccessRequestsUserIdApprove for application/json ContentType.
type PutApiV4GroupsIdAccessRequestsUserIdApproveJSONRequestBody PutApiV4GroupsIdAccessRequestsUserIdApproveJSONBody

// PostApiV4GroupsIdBadgesJSONRequestBody defines body for PostApiV4GroupsIdBadges for application/json ContentType.
type PostApiV4GroupsIdBadgesJSONRequestBody PostApiV4GroupsIdBadgesJSONBody

// PutApiV4GroupsIdBadgesBadgeIdJSONRequestBody defines body for PutApiV4GroupsIdBadgesBadgeId for application/json ContentType.
type PutApiV4GroupsIdBadgesBadgeIdJSONRequestBody PutApiV4GroupsIdBadgesBadgeIdJSONBody

// PutApiV4ProjectsIdAccessRequestsUserIdApproveJSONRequestBody defines body for PutApiV4ProjectsIdAccessRequestsUserIdApprove for application/json ContentType.
type PutApiV4ProjectsIdAccessRequestsUserIdApproveJSONRequestBody PutApiV4ProjectsIdAccessRequestsUserIdApproveJSONBody

// PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMultipartRequestBody defines body for PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImages for multipart/form-data ContentType.
type PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMultipartRequestBody PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMultipartBody

// PutApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdMultipartRequestBody defines body for PutApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageId for multipart/form-data ContentType.
type PutApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdMultipartRequestBody PutApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdMultipartBody

// PostApiV4ProjectsIdBadgesJSONRequestBody defines body for PostApiV4ProjectsIdBadges for application/json ContentType.
type PostApiV4ProjectsIdBadgesJSONRequestBody PostApiV4ProjectsIdBadgesJSONBody

// PutApiV4ProjectsIdBadgesBadgeIdJSONRequestBody defines body for PutApiV4ProjectsIdBadgesBadgeId for application/json ContentType.
type PutApiV4ProjectsIdBadgesBadgeIdJSONRequestBody PutApiV4ProjectsIdBadgesBadgeIdJSONBody

// PostApiV4ProjectsIdRepositoryBranchesJSONRequestBody defines body for PostApiV4ProjectsIdRepositoryBranches for application/json ContentType.
type PostApiV4ProjectsIdRepositoryBranchesJSONRequestBody PostApiV4ProjectsIdRepositoryBranchesJSONBody

// PutApiV4ProjectsIdRepositoryBranchesBranchProtectJSONRequestBody defines body for PutApiV4ProjectsIdRepositoryBranchesBranchProtect for application/json ContentType.
type PutApiV4ProjectsIdRepositoryBranchesBranchProtectJSONRequestBody PutApiV4ProjectsIdRepositoryBranchesBranchProtectJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiV4AdminBatchedBackgroundMigrations request
	GetApiV4AdminBatchedBackgroundMigrations(ctx context.Context, params *GetApiV4AdminBatchedBackgroundMigrationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV4AdminBatchedBackgroundMigrationsId request
	GetApiV4AdminBatchedBackgroundMigrationsId(ctx context.Context, id int32, params *GetApiV4AdminBatchedBackgroundMigrationsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV4AdminBatchedBackgroundMigrationsIdPauseWithBody request with any body
	PutApiV4AdminBatchedBackgroundMigrationsIdPauseWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV4AdminBatchedBackgroundMigrationsIdPause(ctx context.Context, id int32, body PutApiV4AdminBatchedBackgroundMigrationsIdPauseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV4AdminBatchedBackgroundMigrationsIdResumeWithBody request with any body
	PutApiV4AdminBatchedBackgroundMigrationsIdResumeWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV4AdminBatchedBackgroundMigrationsIdResume(ctx context.Context, id int32, body PutApiV4AdminBatchedBackgroundMigrationsIdResumeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV4AdminCiVariables request
	GetApiV4AdminCiVariables(ctx context.Context, params *GetApiV4AdminCiVariablesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV4AdminCiVariablesWithBody request with any body
	PostApiV4AdminCiVariablesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV4AdminCiVariables(ctx context.Context, body PostApiV4AdminCiVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV4AdminCiVariablesKey request
	DeleteApiV4AdminCiVariablesKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV4AdminCiVariablesKey request
	GetApiV4AdminCiVariablesKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV4AdminCiVariablesKeyWithBody request with any body
	PutApiV4AdminCiVariablesKeyWithBody(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV4AdminCiVariablesKey(ctx context.Context, key string, body PutApiV4AdminCiVariablesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV4AdminClusters request
	GetApiV4AdminClusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV4AdminClustersAddWithBody request with any body
	PostApiV4AdminClustersAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV4AdminClustersAdd(ctx context.Context, body PostApiV4AdminClustersAddJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV4AdminClustersClusterId request
	DeleteApiV4AdminClustersClusterId(ctx context.Context, clusterId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV4AdminClustersClusterId request
	GetApiV4AdminClustersClusterId(ctx context.Context, clusterId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV4AdminClustersClusterIdWithBody request with any body
	PutApiV4AdminClustersClusterIdWithBody(ctx context.Context, clusterId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV4AdminClustersClusterId(ctx context.Context, clusterId int32, body PutApiV4AdminClustersClusterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableName request
	GetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableName(ctx context.Context, databaseName GetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableNameParamsDatabaseName, tableName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV4AdminMigrationsTimestampMarkWithBody request with any body
	PostApiV4AdminMigrationsTimestampMarkWithBody(ctx context.Context, timestamp int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV4AdminMigrationsTimestampMark(ctx context.Context, timestamp int32, body PostApiV4AdminMigrationsTimestampMarkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV4ApplicationAppearance request
	GetApiV4ApplicationAppearance(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV4ApplicationAppearanceWithBody request with any body
	PutApiV4ApplicationAppearanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV4ApplicationPlanLimits request
	GetApiV4ApplicationPlanLimits(ctx context.Context, params *GetApiV4ApplicationPlanLimitsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV4ApplicationPlanLimitsWithBody request with any body
	PutApiV4ApplicationPlanLimitsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV4ApplicationPlanLimits(ctx context.Context, body PutApiV4ApplicationPlanLimitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV4Applications request
	GetApiV4Applications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV4ApplicationsWithBody request with any body
	PostApiV4ApplicationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV4Applications(ctx context.Context, body PostApiV4ApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV4ApplicationsId request
	DeleteApiV4ApplicationsId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV4Avatar request
	GetApiV4Avatar(ctx context.Context, params *GetApiV4AvatarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV4BroadcastMessages request
	GetApiV4BroadcastMessages(ctx context.Context, params *GetApiV4BroadcastMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV4BroadcastMessagesWithBody request with any body
	PostApiV4BroadcastMessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV4BroadcastMessages(ctx context.Context, body PostApiV4BroadcastMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV4BroadcastMessagesId request
	DeleteApiV4BroadcastMessagesId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV4BroadcastMessagesId request
	GetApiV4BroadcastMessagesId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV4BroadcastMessagesIdWithBody request with any body
	PutApiV4BroadcastMessagesIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV4BroadcastMessagesId(ctx context.Context, id int32, body PutApiV4BroadcastMessagesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV4BulkImports request
	GetApiV4BulkImports(ctx context.Context, params *GetApiV4BulkImportsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV4BulkImportsWithBody request with any body
	PostApiV4BulkImportsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV4BulkImportsWithFormdataBody(ctx context.Context, body PostApiV4BulkImportsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV4BulkImportsEntities request
	GetApiV4BulkImportsEntities(ctx context.Context, params *GetApiV4BulkImportsEntitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV4BulkImportsImportId request
	GetApiV4BulkImportsImportId(ctx context.Context, importId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV4BulkImportsImportIdEntities request
	GetApiV4BulkImportsImportIdEntities(ctx context.Context, importId int32, params *GetApiV4BulkImportsImportIdEntitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV4BulkImportsImportIdEntitiesEntityId request
	GetApiV4BulkImportsImportIdEntitiesEntityId(ctx context.Context, importId int32, entityId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV4GroupsIdAccessRequests request
	GetApiV4GroupsIdAccessRequests(ctx context.Context, id string, params *GetApiV4GroupsIdAccessRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV4GroupsIdAccessRequests request
	PostApiV4GroupsIdAccessRequests(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV4GroupsIdAccessRequestsUserId request
	DeleteApiV4GroupsIdAccessRequestsUserId(ctx context.Context, id string, userId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV4GroupsIdAccessRequestsUserIdApproveWithBody request with any body
	PutApiV4GroupsIdAccessRequestsUserIdApproveWithBody(ctx context.Context, id string, userId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV4GroupsIdAccessRequestsUserIdApprove(ctx context.Context, id string, userId int32, body PutApiV4GroupsIdAccessRequestsUserIdApproveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV4GroupsIdBadges request
	GetApiV4GroupsIdBadges(ctx context.Context, id string, params *GetApiV4GroupsIdBadgesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV4GroupsIdBadgesWithBody request with any body
	PostApiV4GroupsIdBadgesWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV4GroupsIdBadges(ctx context.Context, id string, body PostApiV4GroupsIdBadgesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV4GroupsIdBadgesRender request
	GetApiV4GroupsIdBadgesRender(ctx context.Context, id string, params *GetApiV4GroupsIdBadgesRenderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV4GroupsIdBadgesBadgeId request
	DeleteApiV4GroupsIdBadgesBadgeId(ctx context.Context, id string, badgeId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV4GroupsIdBadgesBadgeId request
	GetApiV4GroupsIdBadgesBadgeId(ctx context.Context, id string, badgeId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV4GroupsIdBadgesBadgeIdWithBody request with any body
	PutApiV4GroupsIdBadgesBadgeIdWithBody(ctx context.Context, id string, badgeId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV4GroupsIdBadgesBadgeId(ctx context.Context, id string, badgeId int32, body PutApiV4GroupsIdBadgesBadgeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV4Metadata request
	GetApiV4Metadata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV4ProjectsIdAccessRequests request
	GetApiV4ProjectsIdAccessRequests(ctx context.Context, id string, params *GetApiV4ProjectsIdAccessRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV4ProjectsIdAccessRequests request
	PostApiV4ProjectsIdAccessRequests(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV4ProjectsIdAccessRequestsUserId request
	DeleteApiV4ProjectsIdAccessRequestsUserId(ctx context.Context, id string, userId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV4ProjectsIdAccessRequestsUserIdApproveWithBody request with any body
	PutApiV4ProjectsIdAccessRequestsUserIdApproveWithBody(ctx context.Context, id string, userId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV4ProjectsIdAccessRequestsUserIdApprove(ctx context.Context, id string, userId int32, body PutApiV4ProjectsIdAccessRequestsUserIdApproveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImages request
	GetApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImages(ctx context.Context, id string, alertIid int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesWithBody request with any body
	PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesWithBody(ctx context.Context, id string, alertIid int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesAuthorize request
	PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesAuthorize(ctx context.Context, id string, alertIid int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageId request
	DeleteApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageId(ctx context.Context, id string, alertIid int32, metricImageId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdWithBody request with any body
	PutApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdWithBody(ctx context.Context, id string, alertIid int32, metricImageId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV4ProjectsIdBadges request
	GetApiV4ProjectsIdBadges(ctx context.Context, id string, params *GetApiV4ProjectsIdBadgesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV4ProjectsIdBadgesWithBody request with any body
	PostApiV4ProjectsIdBadgesWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV4ProjectsIdBadges(ctx context.Context, id string, body PostApiV4ProjectsIdBadgesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV4ProjectsIdBadgesRender request
	GetApiV4ProjectsIdBadgesRender(ctx context.Context, id string, params *GetApiV4ProjectsIdBadgesRenderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV4ProjectsIdBadgesBadgeId request
	DeleteApiV4ProjectsIdBadgesBadgeId(ctx context.Context, id string, badgeId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV4ProjectsIdBadgesBadgeId request
	GetApiV4ProjectsIdBadgesBadgeId(ctx context.Context, id string, badgeId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV4ProjectsIdBadgesBadgeIdWithBody request with any body
	PutApiV4ProjectsIdBadgesBadgeIdWithBody(ctx context.Context, id string, badgeId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV4ProjectsIdBadgesBadgeId(ctx context.Context, id string, badgeId int32, body PutApiV4ProjectsIdBadgesBadgeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV4ProjectsIdRepositoryBranches request
	GetApiV4ProjectsIdRepositoryBranches(ctx context.Context, id string, params *GetApiV4ProjectsIdRepositoryBranchesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV4ProjectsIdRepositoryBranchesWithBody request with any body
	PostApiV4ProjectsIdRepositoryBranchesWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV4ProjectsIdRepositoryBranches(ctx context.Context, id string, body PostApiV4ProjectsIdRepositoryBranchesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV4ProjectsIdRepositoryBranchesBranch request
	DeleteApiV4ProjectsIdRepositoryBranchesBranch(ctx context.Context, id string, branch string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV4ProjectsIdRepositoryBranchesBranch request
	GetApiV4ProjectsIdRepositoryBranchesBranch(ctx context.Context, id string, branch int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HeadApiV4ProjectsIdRepositoryBranchesBranch request
	HeadApiV4ProjectsIdRepositoryBranchesBranch(ctx context.Context, id string, branch string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV4ProjectsIdRepositoryBranchesBranchProtectWithBody request with any body
	PutApiV4ProjectsIdRepositoryBranchesBranchProtectWithBody(ctx context.Context, id string, branch string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV4ProjectsIdRepositoryBranchesBranchProtect(ctx context.Context, id string, branch string, body PutApiV4ProjectsIdRepositoryBranchesBranchProtectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV4ProjectsIdRepositoryBranchesBranchUnprotect request
	PutApiV4ProjectsIdRepositoryBranchesBranchUnprotect(ctx context.Context, id string, branch string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV4ProjectsIdRepositoryMergedBranches request
	DeleteApiV4ProjectsIdRepositoryMergedBranches(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV4Version request
	GetApiV4Version(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiV4AdminBatchedBackgroundMigrations(ctx context.Context, params *GetApiV4AdminBatchedBackgroundMigrationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4AdminBatchedBackgroundMigrationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV4AdminBatchedBackgroundMigrationsId(ctx context.Context, id int32, params *GetApiV4AdminBatchedBackgroundMigrationsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4AdminBatchedBackgroundMigrationsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV4AdminBatchedBackgroundMigrationsIdPauseWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4AdminBatchedBackgroundMigrationsIdPauseRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV4AdminBatchedBackgroundMigrationsIdPause(ctx context.Context, id int32, body PutApiV4AdminBatchedBackgroundMigrationsIdPauseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4AdminBatchedBackgroundMigrationsIdPauseRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV4AdminBatchedBackgroundMigrationsIdResumeWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4AdminBatchedBackgroundMigrationsIdResumeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV4AdminBatchedBackgroundMigrationsIdResume(ctx context.Context, id int32, body PutApiV4AdminBatchedBackgroundMigrationsIdResumeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4AdminBatchedBackgroundMigrationsIdResumeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV4AdminCiVariables(ctx context.Context, params *GetApiV4AdminCiVariablesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4AdminCiVariablesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV4AdminCiVariablesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4AdminCiVariablesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV4AdminCiVariables(ctx context.Context, body PostApiV4AdminCiVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4AdminCiVariablesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV4AdminCiVariablesKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4AdminCiVariablesKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV4AdminCiVariablesKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4AdminCiVariablesKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV4AdminCiVariablesKeyWithBody(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4AdminCiVariablesKeyRequestWithBody(c.Server, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV4AdminCiVariablesKey(ctx context.Context, key string, body PutApiV4AdminCiVariablesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4AdminCiVariablesKeyRequest(c.Server, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV4AdminClusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4AdminClustersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV4AdminClustersAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4AdminClustersAddRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV4AdminClustersAdd(ctx context.Context, body PostApiV4AdminClustersAddJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4AdminClustersAddRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV4AdminClustersClusterId(ctx context.Context, clusterId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4AdminClustersClusterIdRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV4AdminClustersClusterId(ctx context.Context, clusterId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4AdminClustersClusterIdRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV4AdminClustersClusterIdWithBody(ctx context.Context, clusterId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4AdminClustersClusterIdRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV4AdminClustersClusterId(ctx context.Context, clusterId int32, body PutApiV4AdminClustersClusterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4AdminClustersClusterIdRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableName(ctx context.Context, databaseName GetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableNameParamsDatabaseName, tableName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableNameRequest(c.Server, databaseName, tableName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV4AdminMigrationsTimestampMarkWithBody(ctx context.Context, timestamp int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4AdminMigrationsTimestampMarkRequestWithBody(c.Server, timestamp, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV4AdminMigrationsTimestampMark(ctx context.Context, timestamp int32, body PostApiV4AdminMigrationsTimestampMarkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4AdminMigrationsTimestampMarkRequest(c.Server, timestamp, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV4ApplicationAppearance(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4ApplicationAppearanceRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV4ApplicationAppearanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4ApplicationAppearanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV4ApplicationPlanLimits(ctx context.Context, params *GetApiV4ApplicationPlanLimitsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4ApplicationPlanLimitsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV4ApplicationPlanLimitsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4ApplicationPlanLimitsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV4ApplicationPlanLimits(ctx context.Context, body PutApiV4ApplicationPlanLimitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4ApplicationPlanLimitsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV4Applications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4ApplicationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV4ApplicationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4ApplicationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV4Applications(ctx context.Context, body PostApiV4ApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4ApplicationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV4ApplicationsId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4ApplicationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV4Avatar(ctx context.Context, params *GetApiV4AvatarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4AvatarRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV4BroadcastMessages(ctx context.Context, params *GetApiV4BroadcastMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4BroadcastMessagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV4BroadcastMessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4BroadcastMessagesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV4BroadcastMessages(ctx context.Context, body PostApiV4BroadcastMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4BroadcastMessagesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV4BroadcastMessagesId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4BroadcastMessagesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV4BroadcastMessagesId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4BroadcastMessagesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV4BroadcastMessagesIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4BroadcastMessagesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV4BroadcastMessagesId(ctx context.Context, id int32, body PutApiV4BroadcastMessagesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4BroadcastMessagesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV4BulkImports(ctx context.Context, params *GetApiV4BulkImportsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4BulkImportsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV4BulkImportsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4BulkImportsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV4BulkImportsWithFormdataBody(ctx context.Context, body PostApiV4BulkImportsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4BulkImportsRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV4BulkImportsEntities(ctx context.Context, params *GetApiV4BulkImportsEntitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4BulkImportsEntitiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV4BulkImportsImportId(ctx context.Context, importId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4BulkImportsImportIdRequest(c.Server, importId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV4BulkImportsImportIdEntities(ctx context.Context, importId int32, params *GetApiV4BulkImportsImportIdEntitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4BulkImportsImportIdEntitiesRequest(c.Server, importId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV4BulkImportsImportIdEntitiesEntityId(ctx context.Context, importId int32, entityId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4BulkImportsImportIdEntitiesEntityIdRequest(c.Server, importId, entityId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV4GroupsIdAccessRequests(ctx context.Context, id string, params *GetApiV4GroupsIdAccessRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdAccessRequestsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV4GroupsIdAccessRequests(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdAccessRequestsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV4GroupsIdAccessRequestsUserId(ctx context.Context, id string, userId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4GroupsIdAccessRequestsUserIdRequest(c.Server, id, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV4GroupsIdAccessRequestsUserIdApproveWithBody(ctx context.Context, id string, userId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdAccessRequestsUserIdApproveRequestWithBody(c.Server, id, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV4GroupsIdAccessRequestsUserIdApprove(ctx context.Context, id string, userId int32, body PutApiV4GroupsIdAccessRequestsUserIdApproveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdAccessRequestsUserIdApproveRequest(c.Server, id, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV4GroupsIdBadges(ctx context.Context, id string, params *GetApiV4GroupsIdBadgesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdBadgesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV4GroupsIdBadgesWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdBadgesRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV4GroupsIdBadges(ctx context.Context, id string, body PostApiV4GroupsIdBadgesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdBadgesRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV4GroupsIdBadgesRender(ctx context.Context, id string, params *GetApiV4GroupsIdBadgesRenderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdBadgesRenderRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV4GroupsIdBadgesBadgeId(ctx context.Context, id string, badgeId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4GroupsIdBadgesBadgeIdRequest(c.Server, id, badgeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV4GroupsIdBadgesBadgeId(ctx context.Context, id string, badgeId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdBadgesBadgeIdRequest(c.Server, id, badgeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV4GroupsIdBadgesBadgeIdWithBody(ctx context.Context, id string, badgeId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdBadgesBadgeIdRequestWithBody(c.Server, id, badgeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV4GroupsIdBadgesBadgeId(ctx context.Context, id string, badgeId int32, body PutApiV4GroupsIdBadgesBadgeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdBadgesBadgeIdRequest(c.Server, id, badgeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV4Metadata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4MetadataRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV4ProjectsIdAccessRequests(ctx context.Context, id string, params *GetApiV4ProjectsIdAccessRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4ProjectsIdAccessRequestsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV4ProjectsIdAccessRequests(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4ProjectsIdAccessRequestsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV4ProjectsIdAccessRequestsUserId(ctx context.Context, id string, userId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4ProjectsIdAccessRequestsUserIdRequest(c.Server, id, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV4ProjectsIdAccessRequestsUserIdApproveWithBody(ctx context.Context, id string, userId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4ProjectsIdAccessRequestsUserIdApproveRequestWithBody(c.Server, id, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV4ProjectsIdAccessRequestsUserIdApprove(ctx context.Context, id string, userId int32, body PutApiV4ProjectsIdAccessRequestsUserIdApproveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4ProjectsIdAccessRequestsUserIdApproveRequest(c.Server, id, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImages(ctx context.Context, id string, alertIid int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesRequest(c.Server, id, alertIid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesWithBody(ctx context.Context, id string, alertIid int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesRequestWithBody(c.Server, id, alertIid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesAuthorize(ctx context.Context, id string, alertIid int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesAuthorizeRequest(c.Server, id, alertIid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageId(ctx context.Context, id string, alertIid int32, metricImageId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdRequest(c.Server, id, alertIid, metricImageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdWithBody(ctx context.Context, id string, alertIid int32, metricImageId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdRequestWithBody(c.Server, id, alertIid, metricImageId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV4ProjectsIdBadges(ctx context.Context, id string, params *GetApiV4ProjectsIdBadgesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4ProjectsIdBadgesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV4ProjectsIdBadgesWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4ProjectsIdBadgesRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV4ProjectsIdBadges(ctx context.Context, id string, body PostApiV4ProjectsIdBadgesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4ProjectsIdBadgesRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV4ProjectsIdBadgesRender(ctx context.Context, id string, params *GetApiV4ProjectsIdBadgesRenderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4ProjectsIdBadgesRenderRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV4ProjectsIdBadgesBadgeId(ctx context.Context, id string, badgeId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4ProjectsIdBadgesBadgeIdRequest(c.Server, id, badgeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV4ProjectsIdBadgesBadgeId(ctx context.Context, id string, badgeId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4ProjectsIdBadgesBadgeIdRequest(c.Server, id, badgeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV4ProjectsIdBadgesBadgeIdWithBody(ctx context.Context, id string, badgeId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4ProjectsIdBadgesBadgeIdRequestWithBody(c.Server, id, badgeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV4ProjectsIdBadgesBadgeId(ctx context.Context, id string, badgeId int32, body PutApiV4ProjectsIdBadgesBadgeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4ProjectsIdBadgesBadgeIdRequest(c.Server, id, badgeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV4ProjectsIdRepositoryBranches(ctx context.Context, id string, params *GetApiV4ProjectsIdRepositoryBranchesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4ProjectsIdRepositoryBranchesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV4ProjectsIdRepositoryBranchesWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4ProjectsIdRepositoryBranchesRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV4ProjectsIdRepositoryBranches(ctx context.Context, id string, body PostApiV4ProjectsIdRepositoryBranchesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4ProjectsIdRepositoryBranchesRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV4ProjectsIdRepositoryBranchesBranch(ctx context.Context, id string, branch string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4ProjectsIdRepositoryBranchesBranchRequest(c.Server, id, branch)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV4ProjectsIdRepositoryBranchesBranch(ctx context.Context, id string, branch int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4ProjectsIdRepositoryBranchesBranchRequest(c.Server, id, branch)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HeadApiV4ProjectsIdRepositoryBranchesBranch(ctx context.Context, id string, branch string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHeadApiV4ProjectsIdRepositoryBranchesBranchRequest(c.Server, id, branch)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV4ProjectsIdRepositoryBranchesBranchProtectWithBody(ctx context.Context, id string, branch string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4ProjectsIdRepositoryBranchesBranchProtectRequestWithBody(c.Server, id, branch, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV4ProjectsIdRepositoryBranchesBranchProtect(ctx context.Context, id string, branch string, body PutApiV4ProjectsIdRepositoryBranchesBranchProtectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4ProjectsIdRepositoryBranchesBranchProtectRequest(c.Server, id, branch, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV4ProjectsIdRepositoryBranchesBranchUnprotect(ctx context.Context, id string, branch string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4ProjectsIdRepositoryBranchesBranchUnprotectRequest(c.Server, id, branch)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV4ProjectsIdRepositoryMergedBranches(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4ProjectsIdRepositoryMergedBranchesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV4Version(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4VersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiV4AdminBatchedBackgroundMigrationsRequest generates requests for GetApiV4AdminBatchedBackgroundMigrations
func NewGetApiV4AdminBatchedBackgroundMigrationsRequest(server string, params *GetApiV4AdminBatchedBackgroundMigrationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/admin/batched_background_migrations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Database != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "database", runtime.ParamLocationQuery, *params.Database); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV4AdminBatchedBackgroundMigrationsIdRequest generates requests for GetApiV4AdminBatchedBackgroundMigrationsId
func NewGetApiV4AdminBatchedBackgroundMigrationsIdRequest(server string, id int32, params *GetApiV4AdminBatchedBackgroundMigrationsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/admin/batched_background_migrations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Database != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "database", runtime.ParamLocationQuery, *params.Database); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV4AdminBatchedBackgroundMigrationsIdPauseRequest calls the generic PutApiV4AdminBatchedBackgroundMigrationsIdPause builder with application/json body
func NewPutApiV4AdminBatchedBackgroundMigrationsIdPauseRequest(server string, id int32, body PutApiV4AdminBatchedBackgroundMigrationsIdPauseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4AdminBatchedBackgroundMigrationsIdPauseRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV4AdminBatchedBackgroundMigrationsIdPauseRequestWithBody generates requests for PutApiV4AdminBatchedBackgroundMigrationsIdPause with any type of body
func NewPutApiV4AdminBatchedBackgroundMigrationsIdPauseRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/admin/batched_background_migrations/%s/pause", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiV4AdminBatchedBackgroundMigrationsIdResumeRequest calls the generic PutApiV4AdminBatchedBackgroundMigrationsIdResume builder with application/json body
func NewPutApiV4AdminBatchedBackgroundMigrationsIdResumeRequest(server string, id int32, body PutApiV4AdminBatchedBackgroundMigrationsIdResumeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4AdminBatchedBackgroundMigrationsIdResumeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV4AdminBatchedBackgroundMigrationsIdResumeRequestWithBody generates requests for PutApiV4AdminBatchedBackgroundMigrationsIdResume with any type of body
func NewPutApiV4AdminBatchedBackgroundMigrationsIdResumeRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/admin/batched_background_migrations/%s/resume", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV4AdminCiVariablesRequest generates requests for GetApiV4AdminCiVariables
func NewGetApiV4AdminCiVariablesRequest(server string, params *GetApiV4AdminCiVariablesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/admin/ci/variables")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV4AdminCiVariablesRequest calls the generic PostApiV4AdminCiVariables builder with application/json body
func NewPostApiV4AdminCiVariablesRequest(server string, body PostApiV4AdminCiVariablesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV4AdminCiVariablesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV4AdminCiVariablesRequestWithBody generates requests for PostApiV4AdminCiVariables with any type of body
func NewPostApiV4AdminCiVariablesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/admin/ci/variables")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV4AdminCiVariablesKeyRequest generates requests for DeleteApiV4AdminCiVariablesKey
func NewDeleteApiV4AdminCiVariablesKeyRequest(server string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/admin/ci/variables/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV4AdminCiVariablesKeyRequest generates requests for GetApiV4AdminCiVariablesKey
func NewGetApiV4AdminCiVariablesKeyRequest(server string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/admin/ci/variables/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV4AdminCiVariablesKeyRequest calls the generic PutApiV4AdminCiVariablesKey builder with application/json body
func NewPutApiV4AdminCiVariablesKeyRequest(server string, key string, body PutApiV4AdminCiVariablesKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4AdminCiVariablesKeyRequestWithBody(server, key, "application/json", bodyReader)
}

// NewPutApiV4AdminCiVariablesKeyRequestWithBody generates requests for PutApiV4AdminCiVariablesKey with any type of body
func NewPutApiV4AdminCiVariablesKeyRequestWithBody(server string, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/admin/ci/variables/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV4AdminClustersRequest generates requests for GetApiV4AdminClusters
func NewGetApiV4AdminClustersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/admin/clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV4AdminClustersAddRequest calls the generic PostApiV4AdminClustersAdd builder with application/json body
func NewPostApiV4AdminClustersAddRequest(server string, body PostApiV4AdminClustersAddJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV4AdminClustersAddRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV4AdminClustersAddRequestWithBody generates requests for PostApiV4AdminClustersAdd with any type of body
func NewPostApiV4AdminClustersAddRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/admin/clusters/add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV4AdminClustersClusterIdRequest generates requests for DeleteApiV4AdminClustersClusterId
func NewDeleteApiV4AdminClustersClusterIdRequest(server string, clusterId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/admin/clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV4AdminClustersClusterIdRequest generates requests for GetApiV4AdminClustersClusterId
func NewGetApiV4AdminClustersClusterIdRequest(server string, clusterId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/admin/clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV4AdminClustersClusterIdRequest calls the generic PutApiV4AdminClustersClusterId builder with application/json body
func NewPutApiV4AdminClustersClusterIdRequest(server string, clusterId int32, body PutApiV4AdminClustersClusterIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4AdminClustersClusterIdRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewPutApiV4AdminClustersClusterIdRequestWithBody generates requests for PutApiV4AdminClustersClusterId with any type of body
func NewPutApiV4AdminClustersClusterIdRequestWithBody(server string, clusterId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/admin/clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableNameRequest generates requests for GetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableName
func NewGetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableNameRequest(server string, databaseName GetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableNameParamsDatabaseName, tableName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "database_name", runtime.ParamLocationPath, databaseName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "table_name", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/admin/databases/%s/dictionary/tables/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV4AdminMigrationsTimestampMarkRequest calls the generic PostApiV4AdminMigrationsTimestampMark builder with application/json body
func NewPostApiV4AdminMigrationsTimestampMarkRequest(server string, timestamp int32, body PostApiV4AdminMigrationsTimestampMarkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV4AdminMigrationsTimestampMarkRequestWithBody(server, timestamp, "application/json", bodyReader)
}

// NewPostApiV4AdminMigrationsTimestampMarkRequestWithBody generates requests for PostApiV4AdminMigrationsTimestampMark with any type of body
func NewPostApiV4AdminMigrationsTimestampMarkRequestWithBody(server string, timestamp int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "timestamp", runtime.ParamLocationPath, timestamp)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/admin/migrations/%s/mark", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV4ApplicationAppearanceRequest generates requests for GetApiV4ApplicationAppearance
func NewGetApiV4ApplicationAppearanceRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/application/appearance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV4ApplicationAppearanceRequestWithBody generates requests for PutApiV4ApplicationAppearance with any type of body
func NewPutApiV4ApplicationAppearanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/application/appearance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV4ApplicationPlanLimitsRequest generates requests for GetApiV4ApplicationPlanLimits
func NewGetApiV4ApplicationPlanLimitsRequest(server string, params *GetApiV4ApplicationPlanLimitsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/application/plan_limits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PlanName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "plan_name", runtime.ParamLocationQuery, *params.PlanName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV4ApplicationPlanLimitsRequest calls the generic PutApiV4ApplicationPlanLimits builder with application/json body
func NewPutApiV4ApplicationPlanLimitsRequest(server string, body PutApiV4ApplicationPlanLimitsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4ApplicationPlanLimitsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiV4ApplicationPlanLimitsRequestWithBody generates requests for PutApiV4ApplicationPlanLimits with any type of body
func NewPutApiV4ApplicationPlanLimitsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/application/plan_limits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV4ApplicationsRequest generates requests for GetApiV4Applications
func NewGetApiV4ApplicationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV4ApplicationsRequest calls the generic PostApiV4Applications builder with application/json body
func NewPostApiV4ApplicationsRequest(server string, body PostApiV4ApplicationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV4ApplicationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV4ApplicationsRequestWithBody generates requests for PostApiV4Applications with any type of body
func NewPostApiV4ApplicationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV4ApplicationsIdRequest generates requests for DeleteApiV4ApplicationsId
func NewDeleteApiV4ApplicationsIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/applications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV4AvatarRequest generates requests for GetApiV4Avatar
func NewGetApiV4AvatarRequest(server string, params *GetApiV4AvatarParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/avatar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, params.Email); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV4BroadcastMessagesRequest generates requests for GetApiV4BroadcastMessages
func NewGetApiV4BroadcastMessagesRequest(server string, params *GetApiV4BroadcastMessagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/broadcast_messages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV4BroadcastMessagesRequest calls the generic PostApiV4BroadcastMessages builder with application/json body
func NewPostApiV4BroadcastMessagesRequest(server string, body PostApiV4BroadcastMessagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV4BroadcastMessagesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV4BroadcastMessagesRequestWithBody generates requests for PostApiV4BroadcastMessages with any type of body
func NewPostApiV4BroadcastMessagesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/broadcast_messages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV4BroadcastMessagesIdRequest generates requests for DeleteApiV4BroadcastMessagesId
func NewDeleteApiV4BroadcastMessagesIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/broadcast_messages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV4BroadcastMessagesIdRequest generates requests for GetApiV4BroadcastMessagesId
func NewGetApiV4BroadcastMessagesIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/broadcast_messages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV4BroadcastMessagesIdRequest calls the generic PutApiV4BroadcastMessagesId builder with application/json body
func NewPutApiV4BroadcastMessagesIdRequest(server string, id int32, body PutApiV4BroadcastMessagesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4BroadcastMessagesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV4BroadcastMessagesIdRequestWithBody generates requests for PutApiV4BroadcastMessagesId with any type of body
func NewPutApiV4BroadcastMessagesIdRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/broadcast_messages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV4BulkImportsRequest generates requests for GetApiV4BulkImports
func NewGetApiV4BulkImportsRequest(server string, params *GetApiV4BulkImportsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/bulk_imports")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV4BulkImportsRequestWithFormdataBody calls the generic PostApiV4BulkImports builder with application/x-www-form-urlencoded body
func NewPostApiV4BulkImportsRequestWithFormdataBody(server string, body PostApiV4BulkImportsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostApiV4BulkImportsRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostApiV4BulkImportsRequestWithBody generates requests for PostApiV4BulkImports with any type of body
func NewPostApiV4BulkImportsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/bulk_imports")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV4BulkImportsEntitiesRequest generates requests for GetApiV4BulkImportsEntities
func NewGetApiV4BulkImportsEntitiesRequest(server string, params *GetApiV4BulkImportsEntitiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/bulk_imports/entities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV4BulkImportsImportIdRequest generates requests for GetApiV4BulkImportsImportId
func NewGetApiV4BulkImportsImportIdRequest(server string, importId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "import_id", runtime.ParamLocationPath, importId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/bulk_imports/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV4BulkImportsImportIdEntitiesRequest generates requests for GetApiV4BulkImportsImportIdEntities
func NewGetApiV4BulkImportsImportIdEntitiesRequest(server string, importId int32, params *GetApiV4BulkImportsImportIdEntitiesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "import_id", runtime.ParamLocationPath, importId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/bulk_imports/%s/entities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV4BulkImportsImportIdEntitiesEntityIdRequest generates requests for GetApiV4BulkImportsImportIdEntitiesEntityId
func NewGetApiV4BulkImportsImportIdEntitiesEntityIdRequest(server string, importId int32, entityId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "import_id", runtime.ParamLocationPath, importId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entity_id", runtime.ParamLocationPath, entityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/bulk_imports/%s/entities/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV4GroupsIdAccessRequestsRequest generates requests for GetApiV4GroupsIdAccessRequests
func NewGetApiV4GroupsIdAccessRequestsRequest(server string, id string, params *GetApiV4GroupsIdAccessRequestsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/access_requests", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV4GroupsIdAccessRequestsRequest generates requests for PostApiV4GroupsIdAccessRequests
func NewPostApiV4GroupsIdAccessRequestsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/access_requests", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV4GroupsIdAccessRequestsUserIdRequest generates requests for DeleteApiV4GroupsIdAccessRequestsUserId
func NewDeleteApiV4GroupsIdAccessRequestsUserIdRequest(server string, id string, userId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/access_requests/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV4GroupsIdAccessRequestsUserIdApproveRequest calls the generic PutApiV4GroupsIdAccessRequestsUserIdApprove builder with application/json body
func NewPutApiV4GroupsIdAccessRequestsUserIdApproveRequest(server string, id string, userId int32, body PutApiV4GroupsIdAccessRequestsUserIdApproveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdAccessRequestsUserIdApproveRequestWithBody(server, id, userId, "application/json", bodyReader)
}

// NewPutApiV4GroupsIdAccessRequestsUserIdApproveRequestWithBody generates requests for PutApiV4GroupsIdAccessRequestsUserIdApprove with any type of body
func NewPutApiV4GroupsIdAccessRequestsUserIdApproveRequestWithBody(server string, id string, userId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/access_requests/%s/approve", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV4GroupsIdBadgesRequest generates requests for GetApiV4GroupsIdBadges
func NewGetApiV4GroupsIdBadgesRequest(server string, id string, params *GetApiV4GroupsIdBadgesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/badges", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV4GroupsIdBadgesRequest calls the generic PostApiV4GroupsIdBadges builder with application/json body
func NewPostApiV4GroupsIdBadgesRequest(server string, id string, body PostApiV4GroupsIdBadgesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV4GroupsIdBadgesRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostApiV4GroupsIdBadgesRequestWithBody generates requests for PostApiV4GroupsIdBadges with any type of body
func NewPostApiV4GroupsIdBadgesRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/badges", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV4GroupsIdBadgesRenderRequest generates requests for GetApiV4GroupsIdBadgesRender
func NewGetApiV4GroupsIdBadgesRenderRequest(server string, id string, params *GetApiV4GroupsIdBadgesRenderParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/badges/render", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "link_url", runtime.ParamLocationQuery, params.LinkUrl); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "image_url", runtime.ParamLocationQuery, params.ImageUrl); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV4GroupsIdBadgesBadgeIdRequest generates requests for DeleteApiV4GroupsIdBadgesBadgeId
func NewDeleteApiV4GroupsIdBadgesBadgeIdRequest(server string, id string, badgeId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "badge_id", runtime.ParamLocationPath, badgeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/badges/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV4GroupsIdBadgesBadgeIdRequest generates requests for GetApiV4GroupsIdBadgesBadgeId
func NewGetApiV4GroupsIdBadgesBadgeIdRequest(server string, id string, badgeId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "badge_id", runtime.ParamLocationPath, badgeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/badges/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV4GroupsIdBadgesBadgeIdRequest calls the generic PutApiV4GroupsIdBadgesBadgeId builder with application/json body
func NewPutApiV4GroupsIdBadgesBadgeIdRequest(server string, id string, badgeId int32, body PutApiV4GroupsIdBadgesBadgeIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdBadgesBadgeIdRequestWithBody(server, id, badgeId, "application/json", bodyReader)
}

// NewPutApiV4GroupsIdBadgesBadgeIdRequestWithBody generates requests for PutApiV4GroupsIdBadgesBadgeId with any type of body
func NewPutApiV4GroupsIdBadgesBadgeIdRequestWithBody(server string, id string, badgeId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "badge_id", runtime.ParamLocationPath, badgeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/badges/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV4MetadataRequest generates requests for GetApiV4Metadata
func NewGetApiV4MetadataRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/metadata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV4ProjectsIdAccessRequestsRequest generates requests for GetApiV4ProjectsIdAccessRequests
func NewGetApiV4ProjectsIdAccessRequestsRequest(server string, id string, params *GetApiV4ProjectsIdAccessRequestsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/projects/%s/access_requests", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV4ProjectsIdAccessRequestsRequest generates requests for PostApiV4ProjectsIdAccessRequests
func NewPostApiV4ProjectsIdAccessRequestsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/projects/%s/access_requests", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV4ProjectsIdAccessRequestsUserIdRequest generates requests for DeleteApiV4ProjectsIdAccessRequestsUserId
func NewDeleteApiV4ProjectsIdAccessRequestsUserIdRequest(server string, id string, userId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/projects/%s/access_requests/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV4ProjectsIdAccessRequestsUserIdApproveRequest calls the generic PutApiV4ProjectsIdAccessRequestsUserIdApprove builder with application/json body
func NewPutApiV4ProjectsIdAccessRequestsUserIdApproveRequest(server string, id string, userId int32, body PutApiV4ProjectsIdAccessRequestsUserIdApproveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4ProjectsIdAccessRequestsUserIdApproveRequestWithBody(server, id, userId, "application/json", bodyReader)
}

// NewPutApiV4ProjectsIdAccessRequestsUserIdApproveRequestWithBody generates requests for PutApiV4ProjectsIdAccessRequestsUserIdApprove with any type of body
func NewPutApiV4ProjectsIdAccessRequestsUserIdApproveRequestWithBody(server string, id string, userId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/projects/%s/access_requests/%s/approve", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesRequest generates requests for GetApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImages
func NewGetApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesRequest(server string, id string, alertIid int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alert_iid", runtime.ParamLocationPath, alertIid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/projects/%s/alert_management_alerts/%s/metric_images", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesRequestWithBody generates requests for PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImages with any type of body
func NewPostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesRequestWithBody(server string, id string, alertIid int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alert_iid", runtime.ParamLocationPath, alertIid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/projects/%s/alert_management_alerts/%s/metric_images", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesAuthorizeRequest generates requests for PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesAuthorize
func NewPostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesAuthorizeRequest(server string, id string, alertIid int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alert_iid", runtime.ParamLocationPath, alertIid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/projects/%s/alert_management_alerts/%s/metric_images/authorize", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdRequest generates requests for DeleteApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageId
func NewDeleteApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdRequest(server string, id string, alertIid int32, metricImageId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alert_iid", runtime.ParamLocationPath, alertIid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "metric_image_id", runtime.ParamLocationPath, metricImageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/projects/%s/alert_management_alerts/%s/metric_images/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdRequestWithBody generates requests for PutApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageId with any type of body
func NewPutApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdRequestWithBody(server string, id string, alertIid int32, metricImageId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alert_iid", runtime.ParamLocationPath, alertIid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "metric_image_id", runtime.ParamLocationPath, metricImageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/projects/%s/alert_management_alerts/%s/metric_images/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV4ProjectsIdBadgesRequest generates requests for GetApiV4ProjectsIdBadges
func NewGetApiV4ProjectsIdBadgesRequest(server string, id string, params *GetApiV4ProjectsIdBadgesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/projects/%s/badges", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV4ProjectsIdBadgesRequest calls the generic PostApiV4ProjectsIdBadges builder with application/json body
func NewPostApiV4ProjectsIdBadgesRequest(server string, id string, body PostApiV4ProjectsIdBadgesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV4ProjectsIdBadgesRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostApiV4ProjectsIdBadgesRequestWithBody generates requests for PostApiV4ProjectsIdBadges with any type of body
func NewPostApiV4ProjectsIdBadgesRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/projects/%s/badges", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV4ProjectsIdBadgesRenderRequest generates requests for GetApiV4ProjectsIdBadgesRender
func NewGetApiV4ProjectsIdBadgesRenderRequest(server string, id string, params *GetApiV4ProjectsIdBadgesRenderParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/projects/%s/badges/render", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "link_url", runtime.ParamLocationQuery, params.LinkUrl); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "image_url", runtime.ParamLocationQuery, params.ImageUrl); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV4ProjectsIdBadgesBadgeIdRequest generates requests for DeleteApiV4ProjectsIdBadgesBadgeId
func NewDeleteApiV4ProjectsIdBadgesBadgeIdRequest(server string, id string, badgeId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "badge_id", runtime.ParamLocationPath, badgeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/projects/%s/badges/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV4ProjectsIdBadgesBadgeIdRequest generates requests for GetApiV4ProjectsIdBadgesBadgeId
func NewGetApiV4ProjectsIdBadgesBadgeIdRequest(server string, id string, badgeId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "badge_id", runtime.ParamLocationPath, badgeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/projects/%s/badges/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV4ProjectsIdBadgesBadgeIdRequest calls the generic PutApiV4ProjectsIdBadgesBadgeId builder with application/json body
func NewPutApiV4ProjectsIdBadgesBadgeIdRequest(server string, id string, badgeId int32, body PutApiV4ProjectsIdBadgesBadgeIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4ProjectsIdBadgesBadgeIdRequestWithBody(server, id, badgeId, "application/json", bodyReader)
}

// NewPutApiV4ProjectsIdBadgesBadgeIdRequestWithBody generates requests for PutApiV4ProjectsIdBadgesBadgeId with any type of body
func NewPutApiV4ProjectsIdBadgesBadgeIdRequestWithBody(server string, id string, badgeId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "badge_id", runtime.ParamLocationPath, badgeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/projects/%s/badges/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV4ProjectsIdRepositoryBranchesRequest generates requests for GetApiV4ProjectsIdRepositoryBranches
func NewGetApiV4ProjectsIdRepositoryBranchesRequest(server string, id string, params *GetApiV4ProjectsIdRepositoryBranchesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/projects/%s/repository/branches", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Regex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regex", runtime.ParamLocationQuery, *params.Regex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV4ProjectsIdRepositoryBranchesRequest calls the generic PostApiV4ProjectsIdRepositoryBranches builder with application/json body
func NewPostApiV4ProjectsIdRepositoryBranchesRequest(server string, id string, body PostApiV4ProjectsIdRepositoryBranchesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV4ProjectsIdRepositoryBranchesRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostApiV4ProjectsIdRepositoryBranchesRequestWithBody generates requests for PostApiV4ProjectsIdRepositoryBranches with any type of body
func NewPostApiV4ProjectsIdRepositoryBranchesRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/projects/%s/repository/branches", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV4ProjectsIdRepositoryBranchesBranchRequest generates requests for DeleteApiV4ProjectsIdRepositoryBranchesBranch
func NewDeleteApiV4ProjectsIdRepositoryBranchesBranchRequest(server string, id string, branch string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "branch", runtime.ParamLocationPath, branch)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/projects/%s/repository/branches/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV4ProjectsIdRepositoryBranchesBranchRequest generates requests for GetApiV4ProjectsIdRepositoryBranchesBranch
func NewGetApiV4ProjectsIdRepositoryBranchesBranchRequest(server string, id string, branch int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "branch", runtime.ParamLocationPath, branch)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/projects/%s/repository/branches/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHeadApiV4ProjectsIdRepositoryBranchesBranchRequest generates requests for HeadApiV4ProjectsIdRepositoryBranchesBranch
func NewHeadApiV4ProjectsIdRepositoryBranchesBranchRequest(server string, id string, branch string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "branch", runtime.ParamLocationPath, branch)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/projects/%s/repository/branches/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("HEAD", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV4ProjectsIdRepositoryBranchesBranchProtectRequest calls the generic PutApiV4ProjectsIdRepositoryBranchesBranchProtect builder with application/json body
func NewPutApiV4ProjectsIdRepositoryBranchesBranchProtectRequest(server string, id string, branch string, body PutApiV4ProjectsIdRepositoryBranchesBranchProtectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4ProjectsIdRepositoryBranchesBranchProtectRequestWithBody(server, id, branch, "application/json", bodyReader)
}

// NewPutApiV4ProjectsIdRepositoryBranchesBranchProtectRequestWithBody generates requests for PutApiV4ProjectsIdRepositoryBranchesBranchProtect with any type of body
func NewPutApiV4ProjectsIdRepositoryBranchesBranchProtectRequestWithBody(server string, id string, branch string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "branch", runtime.ParamLocationPath, branch)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/projects/%s/repository/branches/%s/protect", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiV4ProjectsIdRepositoryBranchesBranchUnprotectRequest generates requests for PutApiV4ProjectsIdRepositoryBranchesBranchUnprotect
func NewPutApiV4ProjectsIdRepositoryBranchesBranchUnprotectRequest(server string, id string, branch string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "branch", runtime.ParamLocationPath, branch)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/projects/%s/repository/branches/%s/unprotect", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV4ProjectsIdRepositoryMergedBranchesRequest generates requests for DeleteApiV4ProjectsIdRepositoryMergedBranches
func NewDeleteApiV4ProjectsIdRepositoryMergedBranchesRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/projects/%s/repository/merged_branches", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV4VersionRequest generates requests for GetApiV4Version
func NewGetApiV4VersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiV4AdminBatchedBackgroundMigrationsWithResponse request
	GetApiV4AdminBatchedBackgroundMigrationsWithResponse(ctx context.Context, params *GetApiV4AdminBatchedBackgroundMigrationsParams, reqEditors ...RequestEditorFn) (*GetApiV4AdminBatchedBackgroundMigrationsResponse, error)

	// GetApiV4AdminBatchedBackgroundMigrationsIdWithResponse request
	GetApiV4AdminBatchedBackgroundMigrationsIdWithResponse(ctx context.Context, id int32, params *GetApiV4AdminBatchedBackgroundMigrationsIdParams, reqEditors ...RequestEditorFn) (*GetApiV4AdminBatchedBackgroundMigrationsIdResponse, error)

	// PutApiV4AdminBatchedBackgroundMigrationsIdPauseWithBodyWithResponse request with any body
	PutApiV4AdminBatchedBackgroundMigrationsIdPauseWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4AdminBatchedBackgroundMigrationsIdPauseResponse, error)

	PutApiV4AdminBatchedBackgroundMigrationsIdPauseWithResponse(ctx context.Context, id int32, body PutApiV4AdminBatchedBackgroundMigrationsIdPauseJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4AdminBatchedBackgroundMigrationsIdPauseResponse, error)

	// PutApiV4AdminBatchedBackgroundMigrationsIdResumeWithBodyWithResponse request with any body
	PutApiV4AdminBatchedBackgroundMigrationsIdResumeWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4AdminBatchedBackgroundMigrationsIdResumeResponse, error)

	PutApiV4AdminBatchedBackgroundMigrationsIdResumeWithResponse(ctx context.Context, id int32, body PutApiV4AdminBatchedBackgroundMigrationsIdResumeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4AdminBatchedBackgroundMigrationsIdResumeResponse, error)

	// GetApiV4AdminCiVariablesWithResponse request
	GetApiV4AdminCiVariablesWithResponse(ctx context.Context, params *GetApiV4AdminCiVariablesParams, reqEditors ...RequestEditorFn) (*GetApiV4AdminCiVariablesResponse, error)

	// PostApiV4AdminCiVariablesWithBodyWithResponse request with any body
	PostApiV4AdminCiVariablesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4AdminCiVariablesResponse, error)

	PostApiV4AdminCiVariablesWithResponse(ctx context.Context, body PostApiV4AdminCiVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4AdminCiVariablesResponse, error)

	// DeleteApiV4AdminCiVariablesKeyWithResponse request
	DeleteApiV4AdminCiVariablesKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*DeleteApiV4AdminCiVariablesKeyResponse, error)

	// GetApiV4AdminCiVariablesKeyWithResponse request
	GetApiV4AdminCiVariablesKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*GetApiV4AdminCiVariablesKeyResponse, error)

	// PutApiV4AdminCiVariablesKeyWithBodyWithResponse request with any body
	PutApiV4AdminCiVariablesKeyWithBodyWithResponse(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4AdminCiVariablesKeyResponse, error)

	PutApiV4AdminCiVariablesKeyWithResponse(ctx context.Context, key string, body PutApiV4AdminCiVariablesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4AdminCiVariablesKeyResponse, error)

	// GetApiV4AdminClustersWithResponse request
	GetApiV4AdminClustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV4AdminClustersResponse, error)

	// PostApiV4AdminClustersAddWithBodyWithResponse request with any body
	PostApiV4AdminClustersAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4AdminClustersAddResponse, error)

	PostApiV4AdminClustersAddWithResponse(ctx context.Context, body PostApiV4AdminClustersAddJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4AdminClustersAddResponse, error)

	// DeleteApiV4AdminClustersClusterIdWithResponse request
	DeleteApiV4AdminClustersClusterIdWithResponse(ctx context.Context, clusterId int32, reqEditors ...RequestEditorFn) (*DeleteApiV4AdminClustersClusterIdResponse, error)

	// GetApiV4AdminClustersClusterIdWithResponse request
	GetApiV4AdminClustersClusterIdWithResponse(ctx context.Context, clusterId int32, reqEditors ...RequestEditorFn) (*GetApiV4AdminClustersClusterIdResponse, error)

	// PutApiV4AdminClustersClusterIdWithBodyWithResponse request with any body
	PutApiV4AdminClustersClusterIdWithBodyWithResponse(ctx context.Context, clusterId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4AdminClustersClusterIdResponse, error)

	PutApiV4AdminClustersClusterIdWithResponse(ctx context.Context, clusterId int32, body PutApiV4AdminClustersClusterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4AdminClustersClusterIdResponse, error)

	// GetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableNameWithResponse request
	GetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableNameWithResponse(ctx context.Context, databaseName GetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableNameParamsDatabaseName, tableName string, reqEditors ...RequestEditorFn) (*GetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableNameResponse, error)

	// PostApiV4AdminMigrationsTimestampMarkWithBodyWithResponse request with any body
	PostApiV4AdminMigrationsTimestampMarkWithBodyWithResponse(ctx context.Context, timestamp int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4AdminMigrationsTimestampMarkResponse, error)

	PostApiV4AdminMigrationsTimestampMarkWithResponse(ctx context.Context, timestamp int32, body PostApiV4AdminMigrationsTimestampMarkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4AdminMigrationsTimestampMarkResponse, error)

	// GetApiV4ApplicationAppearanceWithResponse request
	GetApiV4ApplicationAppearanceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV4ApplicationAppearanceResponse, error)

	// PutApiV4ApplicationAppearanceWithBodyWithResponse request with any body
	PutApiV4ApplicationAppearanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4ApplicationAppearanceResponse, error)

	// GetApiV4ApplicationPlanLimitsWithResponse request
	GetApiV4ApplicationPlanLimitsWithResponse(ctx context.Context, params *GetApiV4ApplicationPlanLimitsParams, reqEditors ...RequestEditorFn) (*GetApiV4ApplicationPlanLimitsResponse, error)

	// PutApiV4ApplicationPlanLimitsWithBodyWithResponse request with any body
	PutApiV4ApplicationPlanLimitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4ApplicationPlanLimitsResponse, error)

	PutApiV4ApplicationPlanLimitsWithResponse(ctx context.Context, body PutApiV4ApplicationPlanLimitsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4ApplicationPlanLimitsResponse, error)

	// GetApiV4ApplicationsWithResponse request
	GetApiV4ApplicationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV4ApplicationsResponse, error)

	// PostApiV4ApplicationsWithBodyWithResponse request with any body
	PostApiV4ApplicationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4ApplicationsResponse, error)

	PostApiV4ApplicationsWithResponse(ctx context.Context, body PostApiV4ApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4ApplicationsResponse, error)

	// DeleteApiV4ApplicationsIdWithResponse request
	DeleteApiV4ApplicationsIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV4ApplicationsIdResponse, error)

	// GetApiV4AvatarWithResponse request
	GetApiV4AvatarWithResponse(ctx context.Context, params *GetApiV4AvatarParams, reqEditors ...RequestEditorFn) (*GetApiV4AvatarResponse, error)

	// GetApiV4BroadcastMessagesWithResponse request
	GetApiV4BroadcastMessagesWithResponse(ctx context.Context, params *GetApiV4BroadcastMessagesParams, reqEditors ...RequestEditorFn) (*GetApiV4BroadcastMessagesResponse, error)

	// PostApiV4BroadcastMessagesWithBodyWithResponse request with any body
	PostApiV4BroadcastMessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4BroadcastMessagesResponse, error)

	PostApiV4BroadcastMessagesWithResponse(ctx context.Context, body PostApiV4BroadcastMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4BroadcastMessagesResponse, error)

	// DeleteApiV4BroadcastMessagesIdWithResponse request
	DeleteApiV4BroadcastMessagesIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV4BroadcastMessagesIdResponse, error)

	// GetApiV4BroadcastMessagesIdWithResponse request
	GetApiV4BroadcastMessagesIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV4BroadcastMessagesIdResponse, error)

	// PutApiV4BroadcastMessagesIdWithBodyWithResponse request with any body
	PutApiV4BroadcastMessagesIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4BroadcastMessagesIdResponse, error)

	PutApiV4BroadcastMessagesIdWithResponse(ctx context.Context, id int32, body PutApiV4BroadcastMessagesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4BroadcastMessagesIdResponse, error)

	// GetApiV4BulkImportsWithResponse request
	GetApiV4BulkImportsWithResponse(ctx context.Context, params *GetApiV4BulkImportsParams, reqEditors ...RequestEditorFn) (*GetApiV4BulkImportsResponse, error)

	// PostApiV4BulkImportsWithBodyWithResponse request with any body
	PostApiV4BulkImportsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4BulkImportsResponse, error)

	PostApiV4BulkImportsWithFormdataBodyWithResponse(ctx context.Context, body PostApiV4BulkImportsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4BulkImportsResponse, error)

	// GetApiV4BulkImportsEntitiesWithResponse request
	GetApiV4BulkImportsEntitiesWithResponse(ctx context.Context, params *GetApiV4BulkImportsEntitiesParams, reqEditors ...RequestEditorFn) (*GetApiV4BulkImportsEntitiesResponse, error)

	// GetApiV4BulkImportsImportIdWithResponse request
	GetApiV4BulkImportsImportIdWithResponse(ctx context.Context, importId int32, reqEditors ...RequestEditorFn) (*GetApiV4BulkImportsImportIdResponse, error)

	// GetApiV4BulkImportsImportIdEntitiesWithResponse request
	GetApiV4BulkImportsImportIdEntitiesWithResponse(ctx context.Context, importId int32, params *GetApiV4BulkImportsImportIdEntitiesParams, reqEditors ...RequestEditorFn) (*GetApiV4BulkImportsImportIdEntitiesResponse, error)

	// GetApiV4BulkImportsImportIdEntitiesEntityIdWithResponse request
	GetApiV4BulkImportsImportIdEntitiesEntityIdWithResponse(ctx context.Context, importId int32, entityId int32, reqEditors ...RequestEditorFn) (*GetApiV4BulkImportsImportIdEntitiesEntityIdResponse, error)

	// GetApiV4GroupsIdAccessRequestsWithResponse request
	GetApiV4GroupsIdAccessRequestsWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdAccessRequestsParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdAccessRequestsResponse, error)

	// PostApiV4GroupsIdAccessRequestsWithResponse request
	PostApiV4GroupsIdAccessRequestsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdAccessRequestsResponse, error)

	// DeleteApiV4GroupsIdAccessRequestsUserIdWithResponse request
	DeleteApiV4GroupsIdAccessRequestsUserIdWithResponse(ctx context.Context, id string, userId int32, reqEditors ...RequestEditorFn) (*DeleteApiV4GroupsIdAccessRequestsUserIdResponse, error)

	// PutApiV4GroupsIdAccessRequestsUserIdApproveWithBodyWithResponse request with any body
	PutApiV4GroupsIdAccessRequestsUserIdApproveWithBodyWithResponse(ctx context.Context, id string, userId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdAccessRequestsUserIdApproveResponse, error)

	PutApiV4GroupsIdAccessRequestsUserIdApproveWithResponse(ctx context.Context, id string, userId int32, body PutApiV4GroupsIdAccessRequestsUserIdApproveJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdAccessRequestsUserIdApproveResponse, error)

	// GetApiV4GroupsIdBadgesWithResponse request
	GetApiV4GroupsIdBadgesWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdBadgesParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdBadgesResponse, error)

	// PostApiV4GroupsIdBadgesWithBodyWithResponse request with any body
	PostApiV4GroupsIdBadgesWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdBadgesResponse, error)

	PostApiV4GroupsIdBadgesWithResponse(ctx context.Context, id string, body PostApiV4GroupsIdBadgesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdBadgesResponse, error)

	// GetApiV4GroupsIdBadgesRenderWithResponse request
	GetApiV4GroupsIdBadgesRenderWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdBadgesRenderParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdBadgesRenderResponse, error)

	// DeleteApiV4GroupsIdBadgesBadgeIdWithResponse request
	DeleteApiV4GroupsIdBadgesBadgeIdWithResponse(ctx context.Context, id string, badgeId int32, reqEditors ...RequestEditorFn) (*DeleteApiV4GroupsIdBadgesBadgeIdResponse, error)

	// GetApiV4GroupsIdBadgesBadgeIdWithResponse request
	GetApiV4GroupsIdBadgesBadgeIdWithResponse(ctx context.Context, id string, badgeId int32, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdBadgesBadgeIdResponse, error)

	// PutApiV4GroupsIdBadgesBadgeIdWithBodyWithResponse request with any body
	PutApiV4GroupsIdBadgesBadgeIdWithBodyWithResponse(ctx context.Context, id string, badgeId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdBadgesBadgeIdResponse, error)

	PutApiV4GroupsIdBadgesBadgeIdWithResponse(ctx context.Context, id string, badgeId int32, body PutApiV4GroupsIdBadgesBadgeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdBadgesBadgeIdResponse, error)

	// GetApiV4MetadataWithResponse request
	GetApiV4MetadataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV4MetadataResponse, error)

	// GetApiV4ProjectsIdAccessRequestsWithResponse request
	GetApiV4ProjectsIdAccessRequestsWithResponse(ctx context.Context, id string, params *GetApiV4ProjectsIdAccessRequestsParams, reqEditors ...RequestEditorFn) (*GetApiV4ProjectsIdAccessRequestsResponse, error)

	// PostApiV4ProjectsIdAccessRequestsWithResponse request
	PostApiV4ProjectsIdAccessRequestsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostApiV4ProjectsIdAccessRequestsResponse, error)

	// DeleteApiV4ProjectsIdAccessRequestsUserIdWithResponse request
	DeleteApiV4ProjectsIdAccessRequestsUserIdWithResponse(ctx context.Context, id string, userId int32, reqEditors ...RequestEditorFn) (*DeleteApiV4ProjectsIdAccessRequestsUserIdResponse, error)

	// PutApiV4ProjectsIdAccessRequestsUserIdApproveWithBodyWithResponse request with any body
	PutApiV4ProjectsIdAccessRequestsUserIdApproveWithBodyWithResponse(ctx context.Context, id string, userId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4ProjectsIdAccessRequestsUserIdApproveResponse, error)

	PutApiV4ProjectsIdAccessRequestsUserIdApproveWithResponse(ctx context.Context, id string, userId int32, body PutApiV4ProjectsIdAccessRequestsUserIdApproveJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4ProjectsIdAccessRequestsUserIdApproveResponse, error)

	// GetApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesWithResponse request
	GetApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesWithResponse(ctx context.Context, id string, alertIid int32, reqEditors ...RequestEditorFn) (*GetApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesResponse, error)

	// PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesWithBodyWithResponse request with any body
	PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesWithBodyWithResponse(ctx context.Context, id string, alertIid int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesResponse, error)

	// PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesAuthorizeWithResponse request
	PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesAuthorizeWithResponse(ctx context.Context, id string, alertIid int32, reqEditors ...RequestEditorFn) (*PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesAuthorizeResponse, error)

	// DeleteApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdWithResponse request
	DeleteApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdWithResponse(ctx context.Context, id string, alertIid int32, metricImageId int32, reqEditors ...RequestEditorFn) (*DeleteApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdResponse, error)

	// PutApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdWithBodyWithResponse request with any body
	PutApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdWithBodyWithResponse(ctx context.Context, id string, alertIid int32, metricImageId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdResponse, error)

	// GetApiV4ProjectsIdBadgesWithResponse request
	GetApiV4ProjectsIdBadgesWithResponse(ctx context.Context, id string, params *GetApiV4ProjectsIdBadgesParams, reqEditors ...RequestEditorFn) (*GetApiV4ProjectsIdBadgesResponse, error)

	// PostApiV4ProjectsIdBadgesWithBodyWithResponse request with any body
	PostApiV4ProjectsIdBadgesWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4ProjectsIdBadgesResponse, error)

	PostApiV4ProjectsIdBadgesWithResponse(ctx context.Context, id string, body PostApiV4ProjectsIdBadgesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4ProjectsIdBadgesResponse, error)

	// GetApiV4ProjectsIdBadgesRenderWithResponse request
	GetApiV4ProjectsIdBadgesRenderWithResponse(ctx context.Context, id string, params *GetApiV4ProjectsIdBadgesRenderParams, reqEditors ...RequestEditorFn) (*GetApiV4ProjectsIdBadgesRenderResponse, error)

	// DeleteApiV4ProjectsIdBadgesBadgeIdWithResponse request
	DeleteApiV4ProjectsIdBadgesBadgeIdWithResponse(ctx context.Context, id string, badgeId int32, reqEditors ...RequestEditorFn) (*DeleteApiV4ProjectsIdBadgesBadgeIdResponse, error)

	// GetApiV4ProjectsIdBadgesBadgeIdWithResponse request
	GetApiV4ProjectsIdBadgesBadgeIdWithResponse(ctx context.Context, id string, badgeId int32, reqEditors ...RequestEditorFn) (*GetApiV4ProjectsIdBadgesBadgeIdResponse, error)

	// PutApiV4ProjectsIdBadgesBadgeIdWithBodyWithResponse request with any body
	PutApiV4ProjectsIdBadgesBadgeIdWithBodyWithResponse(ctx context.Context, id string, badgeId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4ProjectsIdBadgesBadgeIdResponse, error)

	PutApiV4ProjectsIdBadgesBadgeIdWithResponse(ctx context.Context, id string, badgeId int32, body PutApiV4ProjectsIdBadgesBadgeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4ProjectsIdBadgesBadgeIdResponse, error)

	// GetApiV4ProjectsIdRepositoryBranchesWithResponse request
	GetApiV4ProjectsIdRepositoryBranchesWithResponse(ctx context.Context, id string, params *GetApiV4ProjectsIdRepositoryBranchesParams, reqEditors ...RequestEditorFn) (*GetApiV4ProjectsIdRepositoryBranchesResponse, error)

	// PostApiV4ProjectsIdRepositoryBranchesWithBodyWithResponse request with any body
	PostApiV4ProjectsIdRepositoryBranchesWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4ProjectsIdRepositoryBranchesResponse, error)

	PostApiV4ProjectsIdRepositoryBranchesWithResponse(ctx context.Context, id string, body PostApiV4ProjectsIdRepositoryBranchesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4ProjectsIdRepositoryBranchesResponse, error)

	// DeleteApiV4ProjectsIdRepositoryBranchesBranchWithResponse request
	DeleteApiV4ProjectsIdRepositoryBranchesBranchWithResponse(ctx context.Context, id string, branch string, reqEditors ...RequestEditorFn) (*DeleteApiV4ProjectsIdRepositoryBranchesBranchResponse, error)

	// GetApiV4ProjectsIdRepositoryBranchesBranchWithResponse request
	GetApiV4ProjectsIdRepositoryBranchesBranchWithResponse(ctx context.Context, id string, branch int32, reqEditors ...RequestEditorFn) (*GetApiV4ProjectsIdRepositoryBranchesBranchResponse, error)

	// HeadApiV4ProjectsIdRepositoryBranchesBranchWithResponse request
	HeadApiV4ProjectsIdRepositoryBranchesBranchWithResponse(ctx context.Context, id string, branch string, reqEditors ...RequestEditorFn) (*HeadApiV4ProjectsIdRepositoryBranchesBranchResponse, error)

	// PutApiV4ProjectsIdRepositoryBranchesBranchProtectWithBodyWithResponse request with any body
	PutApiV4ProjectsIdRepositoryBranchesBranchProtectWithBodyWithResponse(ctx context.Context, id string, branch string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4ProjectsIdRepositoryBranchesBranchProtectResponse, error)

	PutApiV4ProjectsIdRepositoryBranchesBranchProtectWithResponse(ctx context.Context, id string, branch string, body PutApiV4ProjectsIdRepositoryBranchesBranchProtectJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4ProjectsIdRepositoryBranchesBranchProtectResponse, error)

	// PutApiV4ProjectsIdRepositoryBranchesBranchUnprotectWithResponse request
	PutApiV4ProjectsIdRepositoryBranchesBranchUnprotectWithResponse(ctx context.Context, id string, branch string, reqEditors ...RequestEditorFn) (*PutApiV4ProjectsIdRepositoryBranchesBranchUnprotectResponse, error)

	// DeleteApiV4ProjectsIdRepositoryMergedBranchesWithResponse request
	DeleteApiV4ProjectsIdRepositoryMergedBranchesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteApiV4ProjectsIdRepositoryMergedBranchesResponse, error)

	// GetApiV4VersionWithResponse request
	GetApiV4VersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV4VersionResponse, error)
}

type GetApiV4AdminBatchedBackgroundMigrationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]APIEntitiesBatchedBackgroundMigration
}

// Status returns HTTPResponse.Status
func (r GetApiV4AdminBatchedBackgroundMigrationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV4AdminBatchedBackgroundMigrationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV4AdminBatchedBackgroundMigrationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesBatchedBackgroundMigration
}

// Status returns HTTPResponse.Status
func (r GetApiV4AdminBatchedBackgroundMigrationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV4AdminBatchedBackgroundMigrationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV4AdminBatchedBackgroundMigrationsIdPauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesBatchedBackgroundMigration
}

// Status returns HTTPResponse.Status
func (r PutApiV4AdminBatchedBackgroundMigrationsIdPauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV4AdminBatchedBackgroundMigrationsIdPauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV4AdminBatchedBackgroundMigrationsIdResumeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesBatchedBackgroundMigration
}

// Status returns HTTPResponse.Status
func (r PutApiV4AdminBatchedBackgroundMigrationsIdResumeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV4AdminBatchedBackgroundMigrationsIdResumeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV4AdminCiVariablesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesCiVariable
}

// Status returns HTTPResponse.Status
func (r GetApiV4AdminCiVariablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV4AdminCiVariablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV4AdminCiVariablesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *APIEntitiesCiVariable
}

// Status returns HTTPResponse.Status
func (r PostApiV4AdminCiVariablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV4AdminCiVariablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV4AdminCiVariablesKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *APIEntitiesCiVariable
}

// Status returns HTTPResponse.Status
func (r DeleteApiV4AdminCiVariablesKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV4AdminCiVariablesKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV4AdminCiVariablesKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesCiVariable
}

// Status returns HTTPResponse.Status
func (r GetApiV4AdminCiVariablesKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV4AdminCiVariablesKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV4AdminCiVariablesKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesCiVariable
}

// Status returns HTTPResponse.Status
func (r PutApiV4AdminCiVariablesKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV4AdminCiVariablesKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV4AdminClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]APIEntitiesCluster
}

// Status returns HTTPResponse.Status
func (r GetApiV4AdminClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV4AdminClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV4AdminClustersAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *APIEntitiesCluster
}

// Status returns HTTPResponse.Status
func (r PostApiV4AdminClustersAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV4AdminClustersAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV4AdminClustersClusterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *APIEntitiesCluster
}

// Status returns HTTPResponse.Status
func (r DeleteApiV4AdminClustersClusterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV4AdminClustersClusterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV4AdminClustersClusterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesCluster
}

// Status returns HTTPResponse.Status
func (r GetApiV4AdminClustersClusterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV4AdminClustersClusterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV4AdminClustersClusterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesCluster
}

// Status returns HTTPResponse.Status
func (r PutApiV4AdminClustersClusterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV4AdminClustersClusterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesDictionaryTable
}

// Status returns HTTPResponse.Status
func (r GetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV4AdminMigrationsTimestampMarkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV4AdminMigrationsTimestampMarkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV4AdminMigrationsTimestampMarkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV4ApplicationAppearanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesAppearance
}

// Status returns HTTPResponse.Status
func (r GetApiV4ApplicationAppearanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV4ApplicationAppearanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV4ApplicationAppearanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesAppearance
}

// Status returns HTTPResponse.Status
func (r PutApiV4ApplicationAppearanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV4ApplicationAppearanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV4ApplicationPlanLimitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesPlanLimit
}

// Status returns HTTPResponse.Status
func (r GetApiV4ApplicationPlanLimitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV4ApplicationPlanLimitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV4ApplicationPlanLimitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesPlanLimit
}

// Status returns HTTPResponse.Status
func (r PutApiV4ApplicationPlanLimitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV4ApplicationPlanLimitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV4ApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]APIEntitiesApplication
}

// Status returns HTTPResponse.Status
func (r GetApiV4ApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV4ApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV4ApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesApplicationWithSecret
}

// Status returns HTTPResponse.Status
func (r PostApiV4ApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV4ApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV4ApplicationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV4ApplicationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV4ApplicationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV4AvatarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesAvatar
}

// Status returns HTTPResponse.Status
func (r GetApiV4AvatarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV4AvatarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV4BroadcastMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesBroadcastMessage
}

// Status returns HTTPResponse.Status
func (r GetApiV4BroadcastMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV4BroadcastMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV4BroadcastMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *APIEntitiesBroadcastMessage
}

// Status returns HTTPResponse.Status
func (r PostApiV4BroadcastMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV4BroadcastMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV4BroadcastMessagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesBroadcastMessage
}

// Status returns HTTPResponse.Status
func (r DeleteApiV4BroadcastMessagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV4BroadcastMessagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV4BroadcastMessagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesBroadcastMessage
}

// Status returns HTTPResponse.Status
func (r GetApiV4BroadcastMessagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV4BroadcastMessagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV4BroadcastMessagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesBroadcastMessage
}

// Status returns HTTPResponse.Status
func (r PutApiV4BroadcastMessagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV4BroadcastMessagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV4BulkImportsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]APIEntitiesBulkImport
}

// Status returns HTTPResponse.Status
func (r GetApiV4BulkImportsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV4BulkImportsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV4BulkImportsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesBulkImport
}

// Status returns HTTPResponse.Status
func (r PostApiV4BulkImportsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV4BulkImportsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV4BulkImportsEntitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]APIEntitiesBulkImports
}

// Status returns HTTPResponse.Status
func (r GetApiV4BulkImportsEntitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV4BulkImportsEntitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV4BulkImportsImportIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesBulkImport
}

// Status returns HTTPResponse.Status
func (r GetApiV4BulkImportsImportIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV4BulkImportsImportIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV4BulkImportsImportIdEntitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]APIEntitiesBulkImports
}

// Status returns HTTPResponse.Status
func (r GetApiV4BulkImportsImportIdEntitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV4BulkImportsImportIdEntitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV4BulkImportsImportIdEntitiesEntityIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesBulkImports
}

// Status returns HTTPResponse.Status
func (r GetApiV4BulkImportsImportIdEntitiesEntityIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV4BulkImportsImportIdEntitiesEntityIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV4GroupsIdAccessRequestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesAccessRequester
}

// Status returns HTTPResponse.Status
func (r GetApiV4GroupsIdAccessRequestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV4GroupsIdAccessRequestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV4GroupsIdAccessRequestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesAccessRequester
}

// Status returns HTTPResponse.Status
func (r PostApiV4GroupsIdAccessRequestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV4GroupsIdAccessRequestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV4GroupsIdAccessRequestsUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV4GroupsIdAccessRequestsUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV4GroupsIdAccessRequestsUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV4GroupsIdAccessRequestsUserIdApproveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesAccessRequester
}

// Status returns HTTPResponse.Status
func (r PutApiV4GroupsIdAccessRequestsUserIdApproveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV4GroupsIdAccessRequestsUserIdApproveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV4GroupsIdBadgesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]APIEntitiesBadge
}

// Status returns HTTPResponse.Status
func (r GetApiV4GroupsIdBadgesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV4GroupsIdBadgesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV4GroupsIdBadgesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *APIEntitiesBadge
}

// Status returns HTTPResponse.Status
func (r PostApiV4GroupsIdBadgesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV4GroupsIdBadgesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV4GroupsIdBadgesRenderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesBasicBadgeDetails
}

// Status returns HTTPResponse.Status
func (r GetApiV4GroupsIdBadgesRenderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV4GroupsIdBadgesRenderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV4GroupsIdBadgesBadgeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV4GroupsIdBadgesBadgeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV4GroupsIdBadgesBadgeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV4GroupsIdBadgesBadgeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesBadge
}

// Status returns HTTPResponse.Status
func (r GetApiV4GroupsIdBadgesBadgeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV4GroupsIdBadgesBadgeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV4GroupsIdBadgesBadgeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesBadge
}

// Status returns HTTPResponse.Status
func (r PutApiV4GroupsIdBadgesBadgeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV4GroupsIdBadgesBadgeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV4MetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesMetadata
}

// Status returns HTTPResponse.Status
func (r GetApiV4MetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV4MetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV4ProjectsIdAccessRequestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesAccessRequester
}

// Status returns HTTPResponse.Status
func (r GetApiV4ProjectsIdAccessRequestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV4ProjectsIdAccessRequestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV4ProjectsIdAccessRequestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesAccessRequester
}

// Status returns HTTPResponse.Status
func (r PostApiV4ProjectsIdAccessRequestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV4ProjectsIdAccessRequestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV4ProjectsIdAccessRequestsUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV4ProjectsIdAccessRequestsUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV4ProjectsIdAccessRequestsUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV4ProjectsIdAccessRequestsUserIdApproveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesAccessRequester
}

// Status returns HTTPResponse.Status
func (r PutApiV4ProjectsIdAccessRequestsUserIdApproveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV4ProjectsIdAccessRequestsUserIdApproveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]APIEntitiesMetricImage
}

// Status returns HTTPResponse.Status
func (r GetApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesMetricImage
}

// Status returns HTTPResponse.Status
func (r PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesAuthorizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesAuthorizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesAuthorizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *APIEntitiesMetricImage
}

// Status returns HTTPResponse.Status
func (r DeleteApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesMetricImage
}

// Status returns HTTPResponse.Status
func (r PutApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV4ProjectsIdBadgesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]APIEntitiesBadge
}

// Status returns HTTPResponse.Status
func (r GetApiV4ProjectsIdBadgesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV4ProjectsIdBadgesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV4ProjectsIdBadgesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *APIEntitiesBadge
}

// Status returns HTTPResponse.Status
func (r PostApiV4ProjectsIdBadgesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV4ProjectsIdBadgesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV4ProjectsIdBadgesRenderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesBasicBadgeDetails
}

// Status returns HTTPResponse.Status
func (r GetApiV4ProjectsIdBadgesRenderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV4ProjectsIdBadgesRenderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV4ProjectsIdBadgesBadgeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV4ProjectsIdBadgesBadgeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV4ProjectsIdBadgesBadgeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV4ProjectsIdBadgesBadgeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesBadge
}

// Status returns HTTPResponse.Status
func (r GetApiV4ProjectsIdBadgesBadgeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV4ProjectsIdBadgesBadgeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV4ProjectsIdBadgesBadgeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesBadge
}

// Status returns HTTPResponse.Status
func (r PutApiV4ProjectsIdBadgesBadgeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV4ProjectsIdBadgesBadgeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV4ProjectsIdRepositoryBranchesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]APIEntitiesBranch
}

// Status returns HTTPResponse.Status
func (r GetApiV4ProjectsIdRepositoryBranchesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV4ProjectsIdRepositoryBranchesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV4ProjectsIdRepositoryBranchesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *APIEntitiesBranch
}

// Status returns HTTPResponse.Status
func (r PostApiV4ProjectsIdRepositoryBranchesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV4ProjectsIdRepositoryBranchesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV4ProjectsIdRepositoryBranchesBranchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV4ProjectsIdRepositoryBranchesBranchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV4ProjectsIdRepositoryBranchesBranchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV4ProjectsIdRepositoryBranchesBranchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesBranch
}

// Status returns HTTPResponse.Status
func (r GetApiV4ProjectsIdRepositoryBranchesBranchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV4ProjectsIdRepositoryBranchesBranchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HeadApiV4ProjectsIdRepositoryBranchesBranchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r HeadApiV4ProjectsIdRepositoryBranchesBranchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HeadApiV4ProjectsIdRepositoryBranchesBranchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV4ProjectsIdRepositoryBranchesBranchProtectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesBranch
}

// Status returns HTTPResponse.Status
func (r PutApiV4ProjectsIdRepositoryBranchesBranchProtectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV4ProjectsIdRepositoryBranchesBranchProtectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV4ProjectsIdRepositoryBranchesBranchUnprotectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesBranch
}

// Status returns HTTPResponse.Status
func (r PutApiV4ProjectsIdRepositoryBranchesBranchUnprotectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV4ProjectsIdRepositoryBranchesBranchUnprotectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV4ProjectsIdRepositoryMergedBranchesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV4ProjectsIdRepositoryMergedBranchesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV4ProjectsIdRepositoryMergedBranchesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV4VersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEntitiesMetadata
}

// Status returns HTTPResponse.Status
func (r GetApiV4VersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV4VersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiV4AdminBatchedBackgroundMigrationsWithResponse request returning *GetApiV4AdminBatchedBackgroundMigrationsResponse
func (c *ClientWithResponses) GetApiV4AdminBatchedBackgroundMigrationsWithResponse(ctx context.Context, params *GetApiV4AdminBatchedBackgroundMigrationsParams, reqEditors ...RequestEditorFn) (*GetApiV4AdminBatchedBackgroundMigrationsResponse, error) {
	rsp, err := c.GetApiV4AdminBatchedBackgroundMigrations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4AdminBatchedBackgroundMigrationsResponse(rsp)
}

// GetApiV4AdminBatchedBackgroundMigrationsIdWithResponse request returning *GetApiV4AdminBatchedBackgroundMigrationsIdResponse
func (c *ClientWithResponses) GetApiV4AdminBatchedBackgroundMigrationsIdWithResponse(ctx context.Context, id int32, params *GetApiV4AdminBatchedBackgroundMigrationsIdParams, reqEditors ...RequestEditorFn) (*GetApiV4AdminBatchedBackgroundMigrationsIdResponse, error) {
	rsp, err := c.GetApiV4AdminBatchedBackgroundMigrationsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4AdminBatchedBackgroundMigrationsIdResponse(rsp)
}

// PutApiV4AdminBatchedBackgroundMigrationsIdPauseWithBodyWithResponse request with arbitrary body returning *PutApiV4AdminBatchedBackgroundMigrationsIdPauseResponse
func (c *ClientWithResponses) PutApiV4AdminBatchedBackgroundMigrationsIdPauseWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4AdminBatchedBackgroundMigrationsIdPauseResponse, error) {
	rsp, err := c.PutApiV4AdminBatchedBackgroundMigrationsIdPauseWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4AdminBatchedBackgroundMigrationsIdPauseResponse(rsp)
}

func (c *ClientWithResponses) PutApiV4AdminBatchedBackgroundMigrationsIdPauseWithResponse(ctx context.Context, id int32, body PutApiV4AdminBatchedBackgroundMigrationsIdPauseJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4AdminBatchedBackgroundMigrationsIdPauseResponse, error) {
	rsp, err := c.PutApiV4AdminBatchedBackgroundMigrationsIdPause(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4AdminBatchedBackgroundMigrationsIdPauseResponse(rsp)
}

// PutApiV4AdminBatchedBackgroundMigrationsIdResumeWithBodyWithResponse request with arbitrary body returning *PutApiV4AdminBatchedBackgroundMigrationsIdResumeResponse
func (c *ClientWithResponses) PutApiV4AdminBatchedBackgroundMigrationsIdResumeWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4AdminBatchedBackgroundMigrationsIdResumeResponse, error) {
	rsp, err := c.PutApiV4AdminBatchedBackgroundMigrationsIdResumeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4AdminBatchedBackgroundMigrationsIdResumeResponse(rsp)
}

func (c *ClientWithResponses) PutApiV4AdminBatchedBackgroundMigrationsIdResumeWithResponse(ctx context.Context, id int32, body PutApiV4AdminBatchedBackgroundMigrationsIdResumeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4AdminBatchedBackgroundMigrationsIdResumeResponse, error) {
	rsp, err := c.PutApiV4AdminBatchedBackgroundMigrationsIdResume(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4AdminBatchedBackgroundMigrationsIdResumeResponse(rsp)
}

// GetApiV4AdminCiVariablesWithResponse request returning *GetApiV4AdminCiVariablesResponse
func (c *ClientWithResponses) GetApiV4AdminCiVariablesWithResponse(ctx context.Context, params *GetApiV4AdminCiVariablesParams, reqEditors ...RequestEditorFn) (*GetApiV4AdminCiVariablesResponse, error) {
	rsp, err := c.GetApiV4AdminCiVariables(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4AdminCiVariablesResponse(rsp)
}

// PostApiV4AdminCiVariablesWithBodyWithResponse request with arbitrary body returning *PostApiV4AdminCiVariablesResponse
func (c *ClientWithResponses) PostApiV4AdminCiVariablesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4AdminCiVariablesResponse, error) {
	rsp, err := c.PostApiV4AdminCiVariablesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4AdminCiVariablesResponse(rsp)
}

func (c *ClientWithResponses) PostApiV4AdminCiVariablesWithResponse(ctx context.Context, body PostApiV4AdminCiVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4AdminCiVariablesResponse, error) {
	rsp, err := c.PostApiV4AdminCiVariables(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4AdminCiVariablesResponse(rsp)
}

// DeleteApiV4AdminCiVariablesKeyWithResponse request returning *DeleteApiV4AdminCiVariablesKeyResponse
func (c *ClientWithResponses) DeleteApiV4AdminCiVariablesKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*DeleteApiV4AdminCiVariablesKeyResponse, error) {
	rsp, err := c.DeleteApiV4AdminCiVariablesKey(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4AdminCiVariablesKeyResponse(rsp)
}

// GetApiV4AdminCiVariablesKeyWithResponse request returning *GetApiV4AdminCiVariablesKeyResponse
func (c *ClientWithResponses) GetApiV4AdminCiVariablesKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*GetApiV4AdminCiVariablesKeyResponse, error) {
	rsp, err := c.GetApiV4AdminCiVariablesKey(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4AdminCiVariablesKeyResponse(rsp)
}

// PutApiV4AdminCiVariablesKeyWithBodyWithResponse request with arbitrary body returning *PutApiV4AdminCiVariablesKeyResponse
func (c *ClientWithResponses) PutApiV4AdminCiVariablesKeyWithBodyWithResponse(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4AdminCiVariablesKeyResponse, error) {
	rsp, err := c.PutApiV4AdminCiVariablesKeyWithBody(ctx, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4AdminCiVariablesKeyResponse(rsp)
}

func (c *ClientWithResponses) PutApiV4AdminCiVariablesKeyWithResponse(ctx context.Context, key string, body PutApiV4AdminCiVariablesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4AdminCiVariablesKeyResponse, error) {
	rsp, err := c.PutApiV4AdminCiVariablesKey(ctx, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4AdminCiVariablesKeyResponse(rsp)
}

// GetApiV4AdminClustersWithResponse request returning *GetApiV4AdminClustersResponse
func (c *ClientWithResponses) GetApiV4AdminClustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV4AdminClustersResponse, error) {
	rsp, err := c.GetApiV4AdminClusters(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4AdminClustersResponse(rsp)
}

// PostApiV4AdminClustersAddWithBodyWithResponse request with arbitrary body returning *PostApiV4AdminClustersAddResponse
func (c *ClientWithResponses) PostApiV4AdminClustersAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4AdminClustersAddResponse, error) {
	rsp, err := c.PostApiV4AdminClustersAddWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4AdminClustersAddResponse(rsp)
}

func (c *ClientWithResponses) PostApiV4AdminClustersAddWithResponse(ctx context.Context, body PostApiV4AdminClustersAddJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4AdminClustersAddResponse, error) {
	rsp, err := c.PostApiV4AdminClustersAdd(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4AdminClustersAddResponse(rsp)
}

// DeleteApiV4AdminClustersClusterIdWithResponse request returning *DeleteApiV4AdminClustersClusterIdResponse
func (c *ClientWithResponses) DeleteApiV4AdminClustersClusterIdWithResponse(ctx context.Context, clusterId int32, reqEditors ...RequestEditorFn) (*DeleteApiV4AdminClustersClusterIdResponse, error) {
	rsp, err := c.DeleteApiV4AdminClustersClusterId(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4AdminClustersClusterIdResponse(rsp)
}

// GetApiV4AdminClustersClusterIdWithResponse request returning *GetApiV4AdminClustersClusterIdResponse
func (c *ClientWithResponses) GetApiV4AdminClustersClusterIdWithResponse(ctx context.Context, clusterId int32, reqEditors ...RequestEditorFn) (*GetApiV4AdminClustersClusterIdResponse, error) {
	rsp, err := c.GetApiV4AdminClustersClusterId(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4AdminClustersClusterIdResponse(rsp)
}

// PutApiV4AdminClustersClusterIdWithBodyWithResponse request with arbitrary body returning *PutApiV4AdminClustersClusterIdResponse
func (c *ClientWithResponses) PutApiV4AdminClustersClusterIdWithBodyWithResponse(ctx context.Context, clusterId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4AdminClustersClusterIdResponse, error) {
	rsp, err := c.PutApiV4AdminClustersClusterIdWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4AdminClustersClusterIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV4AdminClustersClusterIdWithResponse(ctx context.Context, clusterId int32, body PutApiV4AdminClustersClusterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4AdminClustersClusterIdResponse, error) {
	rsp, err := c.PutApiV4AdminClustersClusterId(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4AdminClustersClusterIdResponse(rsp)
}

// GetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableNameWithResponse request returning *GetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableNameResponse
func (c *ClientWithResponses) GetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableNameWithResponse(ctx context.Context, databaseName GetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableNameParamsDatabaseName, tableName string, reqEditors ...RequestEditorFn) (*GetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableNameResponse, error) {
	rsp, err := c.GetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableName(ctx, databaseName, tableName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableNameResponse(rsp)
}

// PostApiV4AdminMigrationsTimestampMarkWithBodyWithResponse request with arbitrary body returning *PostApiV4AdminMigrationsTimestampMarkResponse
func (c *ClientWithResponses) PostApiV4AdminMigrationsTimestampMarkWithBodyWithResponse(ctx context.Context, timestamp int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4AdminMigrationsTimestampMarkResponse, error) {
	rsp, err := c.PostApiV4AdminMigrationsTimestampMarkWithBody(ctx, timestamp, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4AdminMigrationsTimestampMarkResponse(rsp)
}

func (c *ClientWithResponses) PostApiV4AdminMigrationsTimestampMarkWithResponse(ctx context.Context, timestamp int32, body PostApiV4AdminMigrationsTimestampMarkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4AdminMigrationsTimestampMarkResponse, error) {
	rsp, err := c.PostApiV4AdminMigrationsTimestampMark(ctx, timestamp, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4AdminMigrationsTimestampMarkResponse(rsp)
}

// GetApiV4ApplicationAppearanceWithResponse request returning *GetApiV4ApplicationAppearanceResponse
func (c *ClientWithResponses) GetApiV4ApplicationAppearanceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV4ApplicationAppearanceResponse, error) {
	rsp, err := c.GetApiV4ApplicationAppearance(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4ApplicationAppearanceResponse(rsp)
}

// PutApiV4ApplicationAppearanceWithBodyWithResponse request with arbitrary body returning *PutApiV4ApplicationAppearanceResponse
func (c *ClientWithResponses) PutApiV4ApplicationAppearanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4ApplicationAppearanceResponse, error) {
	rsp, err := c.PutApiV4ApplicationAppearanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4ApplicationAppearanceResponse(rsp)
}

// GetApiV4ApplicationPlanLimitsWithResponse request returning *GetApiV4ApplicationPlanLimitsResponse
func (c *ClientWithResponses) GetApiV4ApplicationPlanLimitsWithResponse(ctx context.Context, params *GetApiV4ApplicationPlanLimitsParams, reqEditors ...RequestEditorFn) (*GetApiV4ApplicationPlanLimitsResponse, error) {
	rsp, err := c.GetApiV4ApplicationPlanLimits(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4ApplicationPlanLimitsResponse(rsp)
}

// PutApiV4ApplicationPlanLimitsWithBodyWithResponse request with arbitrary body returning *PutApiV4ApplicationPlanLimitsResponse
func (c *ClientWithResponses) PutApiV4ApplicationPlanLimitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4ApplicationPlanLimitsResponse, error) {
	rsp, err := c.PutApiV4ApplicationPlanLimitsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4ApplicationPlanLimitsResponse(rsp)
}

func (c *ClientWithResponses) PutApiV4ApplicationPlanLimitsWithResponse(ctx context.Context, body PutApiV4ApplicationPlanLimitsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4ApplicationPlanLimitsResponse, error) {
	rsp, err := c.PutApiV4ApplicationPlanLimits(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4ApplicationPlanLimitsResponse(rsp)
}

// GetApiV4ApplicationsWithResponse request returning *GetApiV4ApplicationsResponse
func (c *ClientWithResponses) GetApiV4ApplicationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV4ApplicationsResponse, error) {
	rsp, err := c.GetApiV4Applications(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4ApplicationsResponse(rsp)
}

// PostApiV4ApplicationsWithBodyWithResponse request with arbitrary body returning *PostApiV4ApplicationsResponse
func (c *ClientWithResponses) PostApiV4ApplicationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4ApplicationsResponse, error) {
	rsp, err := c.PostApiV4ApplicationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4ApplicationsResponse(rsp)
}

func (c *ClientWithResponses) PostApiV4ApplicationsWithResponse(ctx context.Context, body PostApiV4ApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4ApplicationsResponse, error) {
	rsp, err := c.PostApiV4Applications(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4ApplicationsResponse(rsp)
}

// DeleteApiV4ApplicationsIdWithResponse request returning *DeleteApiV4ApplicationsIdResponse
func (c *ClientWithResponses) DeleteApiV4ApplicationsIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV4ApplicationsIdResponse, error) {
	rsp, err := c.DeleteApiV4ApplicationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4ApplicationsIdResponse(rsp)
}

// GetApiV4AvatarWithResponse request returning *GetApiV4AvatarResponse
func (c *ClientWithResponses) GetApiV4AvatarWithResponse(ctx context.Context, params *GetApiV4AvatarParams, reqEditors ...RequestEditorFn) (*GetApiV4AvatarResponse, error) {
	rsp, err := c.GetApiV4Avatar(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4AvatarResponse(rsp)
}

// GetApiV4BroadcastMessagesWithResponse request returning *GetApiV4BroadcastMessagesResponse
func (c *ClientWithResponses) GetApiV4BroadcastMessagesWithResponse(ctx context.Context, params *GetApiV4BroadcastMessagesParams, reqEditors ...RequestEditorFn) (*GetApiV4BroadcastMessagesResponse, error) {
	rsp, err := c.GetApiV4BroadcastMessages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4BroadcastMessagesResponse(rsp)
}

// PostApiV4BroadcastMessagesWithBodyWithResponse request with arbitrary body returning *PostApiV4BroadcastMessagesResponse
func (c *ClientWithResponses) PostApiV4BroadcastMessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4BroadcastMessagesResponse, error) {
	rsp, err := c.PostApiV4BroadcastMessagesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4BroadcastMessagesResponse(rsp)
}

func (c *ClientWithResponses) PostApiV4BroadcastMessagesWithResponse(ctx context.Context, body PostApiV4BroadcastMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4BroadcastMessagesResponse, error) {
	rsp, err := c.PostApiV4BroadcastMessages(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4BroadcastMessagesResponse(rsp)
}

// DeleteApiV4BroadcastMessagesIdWithResponse request returning *DeleteApiV4BroadcastMessagesIdResponse
func (c *ClientWithResponses) DeleteApiV4BroadcastMessagesIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV4BroadcastMessagesIdResponse, error) {
	rsp, err := c.DeleteApiV4BroadcastMessagesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4BroadcastMessagesIdResponse(rsp)
}

// GetApiV4BroadcastMessagesIdWithResponse request returning *GetApiV4BroadcastMessagesIdResponse
func (c *ClientWithResponses) GetApiV4BroadcastMessagesIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV4BroadcastMessagesIdResponse, error) {
	rsp, err := c.GetApiV4BroadcastMessagesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4BroadcastMessagesIdResponse(rsp)
}

// PutApiV4BroadcastMessagesIdWithBodyWithResponse request with arbitrary body returning *PutApiV4BroadcastMessagesIdResponse
func (c *ClientWithResponses) PutApiV4BroadcastMessagesIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4BroadcastMessagesIdResponse, error) {
	rsp, err := c.PutApiV4BroadcastMessagesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4BroadcastMessagesIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV4BroadcastMessagesIdWithResponse(ctx context.Context, id int32, body PutApiV4BroadcastMessagesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4BroadcastMessagesIdResponse, error) {
	rsp, err := c.PutApiV4BroadcastMessagesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4BroadcastMessagesIdResponse(rsp)
}

// GetApiV4BulkImportsWithResponse request returning *GetApiV4BulkImportsResponse
func (c *ClientWithResponses) GetApiV4BulkImportsWithResponse(ctx context.Context, params *GetApiV4BulkImportsParams, reqEditors ...RequestEditorFn) (*GetApiV4BulkImportsResponse, error) {
	rsp, err := c.GetApiV4BulkImports(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4BulkImportsResponse(rsp)
}

// PostApiV4BulkImportsWithBodyWithResponse request with arbitrary body returning *PostApiV4BulkImportsResponse
func (c *ClientWithResponses) PostApiV4BulkImportsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4BulkImportsResponse, error) {
	rsp, err := c.PostApiV4BulkImportsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4BulkImportsResponse(rsp)
}

func (c *ClientWithResponses) PostApiV4BulkImportsWithFormdataBodyWithResponse(ctx context.Context, body PostApiV4BulkImportsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4BulkImportsResponse, error) {
	rsp, err := c.PostApiV4BulkImportsWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4BulkImportsResponse(rsp)
}

// GetApiV4BulkImportsEntitiesWithResponse request returning *GetApiV4BulkImportsEntitiesResponse
func (c *ClientWithResponses) GetApiV4BulkImportsEntitiesWithResponse(ctx context.Context, params *GetApiV4BulkImportsEntitiesParams, reqEditors ...RequestEditorFn) (*GetApiV4BulkImportsEntitiesResponse, error) {
	rsp, err := c.GetApiV4BulkImportsEntities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4BulkImportsEntitiesResponse(rsp)
}

// GetApiV4BulkImportsImportIdWithResponse request returning *GetApiV4BulkImportsImportIdResponse
func (c *ClientWithResponses) GetApiV4BulkImportsImportIdWithResponse(ctx context.Context, importId int32, reqEditors ...RequestEditorFn) (*GetApiV4BulkImportsImportIdResponse, error) {
	rsp, err := c.GetApiV4BulkImportsImportId(ctx, importId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4BulkImportsImportIdResponse(rsp)
}

// GetApiV4BulkImportsImportIdEntitiesWithResponse request returning *GetApiV4BulkImportsImportIdEntitiesResponse
func (c *ClientWithResponses) GetApiV4BulkImportsImportIdEntitiesWithResponse(ctx context.Context, importId int32, params *GetApiV4BulkImportsImportIdEntitiesParams, reqEditors ...RequestEditorFn) (*GetApiV4BulkImportsImportIdEntitiesResponse, error) {
	rsp, err := c.GetApiV4BulkImportsImportIdEntities(ctx, importId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4BulkImportsImportIdEntitiesResponse(rsp)
}

// GetApiV4BulkImportsImportIdEntitiesEntityIdWithResponse request returning *GetApiV4BulkImportsImportIdEntitiesEntityIdResponse
func (c *ClientWithResponses) GetApiV4BulkImportsImportIdEntitiesEntityIdWithResponse(ctx context.Context, importId int32, entityId int32, reqEditors ...RequestEditorFn) (*GetApiV4BulkImportsImportIdEntitiesEntityIdResponse, error) {
	rsp, err := c.GetApiV4BulkImportsImportIdEntitiesEntityId(ctx, importId, entityId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4BulkImportsImportIdEntitiesEntityIdResponse(rsp)
}

// GetApiV4GroupsIdAccessRequestsWithResponse request returning *GetApiV4GroupsIdAccessRequestsResponse
func (c *ClientWithResponses) GetApiV4GroupsIdAccessRequestsWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdAccessRequestsParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdAccessRequestsResponse, error) {
	rsp, err := c.GetApiV4GroupsIdAccessRequests(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdAccessRequestsResponse(rsp)
}

// PostApiV4GroupsIdAccessRequestsWithResponse request returning *PostApiV4GroupsIdAccessRequestsResponse
func (c *ClientWithResponses) PostApiV4GroupsIdAccessRequestsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdAccessRequestsResponse, error) {
	rsp, err := c.PostApiV4GroupsIdAccessRequests(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdAccessRequestsResponse(rsp)
}

// DeleteApiV4GroupsIdAccessRequestsUserIdWithResponse request returning *DeleteApiV4GroupsIdAccessRequestsUserIdResponse
func (c *ClientWithResponses) DeleteApiV4GroupsIdAccessRequestsUserIdWithResponse(ctx context.Context, id string, userId int32, reqEditors ...RequestEditorFn) (*DeleteApiV4GroupsIdAccessRequestsUserIdResponse, error) {
	rsp, err := c.DeleteApiV4GroupsIdAccessRequestsUserId(ctx, id, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4GroupsIdAccessRequestsUserIdResponse(rsp)
}

// PutApiV4GroupsIdAccessRequestsUserIdApproveWithBodyWithResponse request with arbitrary body returning *PutApiV4GroupsIdAccessRequestsUserIdApproveResponse
func (c *ClientWithResponses) PutApiV4GroupsIdAccessRequestsUserIdApproveWithBodyWithResponse(ctx context.Context, id string, userId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdAccessRequestsUserIdApproveResponse, error) {
	rsp, err := c.PutApiV4GroupsIdAccessRequestsUserIdApproveWithBody(ctx, id, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdAccessRequestsUserIdApproveResponse(rsp)
}

func (c *ClientWithResponses) PutApiV4GroupsIdAccessRequestsUserIdApproveWithResponse(ctx context.Context, id string, userId int32, body PutApiV4GroupsIdAccessRequestsUserIdApproveJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdAccessRequestsUserIdApproveResponse, error) {
	rsp, err := c.PutApiV4GroupsIdAccessRequestsUserIdApprove(ctx, id, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdAccessRequestsUserIdApproveResponse(rsp)
}

// GetApiV4GroupsIdBadgesWithResponse request returning *GetApiV4GroupsIdBadgesResponse
func (c *ClientWithResponses) GetApiV4GroupsIdBadgesWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdBadgesParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdBadgesResponse, error) {
	rsp, err := c.GetApiV4GroupsIdBadges(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdBadgesResponse(rsp)
}

// PostApiV4GroupsIdBadgesWithBodyWithResponse request with arbitrary body returning *PostApiV4GroupsIdBadgesResponse
func (c *ClientWithResponses) PostApiV4GroupsIdBadgesWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdBadgesResponse, error) {
	rsp, err := c.PostApiV4GroupsIdBadgesWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdBadgesResponse(rsp)
}

func (c *ClientWithResponses) PostApiV4GroupsIdBadgesWithResponse(ctx context.Context, id string, body PostApiV4GroupsIdBadgesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdBadgesResponse, error) {
	rsp, err := c.PostApiV4GroupsIdBadges(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdBadgesResponse(rsp)
}

// GetApiV4GroupsIdBadgesRenderWithResponse request returning *GetApiV4GroupsIdBadgesRenderResponse
func (c *ClientWithResponses) GetApiV4GroupsIdBadgesRenderWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdBadgesRenderParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdBadgesRenderResponse, error) {
	rsp, err := c.GetApiV4GroupsIdBadgesRender(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdBadgesRenderResponse(rsp)
}

// DeleteApiV4GroupsIdBadgesBadgeIdWithResponse request returning *DeleteApiV4GroupsIdBadgesBadgeIdResponse
func (c *ClientWithResponses) DeleteApiV4GroupsIdBadgesBadgeIdWithResponse(ctx context.Context, id string, badgeId int32, reqEditors ...RequestEditorFn) (*DeleteApiV4GroupsIdBadgesBadgeIdResponse, error) {
	rsp, err := c.DeleteApiV4GroupsIdBadgesBadgeId(ctx, id, badgeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4GroupsIdBadgesBadgeIdResponse(rsp)
}

// GetApiV4GroupsIdBadgesBadgeIdWithResponse request returning *GetApiV4GroupsIdBadgesBadgeIdResponse
func (c *ClientWithResponses) GetApiV4GroupsIdBadgesBadgeIdWithResponse(ctx context.Context, id string, badgeId int32, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdBadgesBadgeIdResponse, error) {
	rsp, err := c.GetApiV4GroupsIdBadgesBadgeId(ctx, id, badgeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdBadgesBadgeIdResponse(rsp)
}

// PutApiV4GroupsIdBadgesBadgeIdWithBodyWithResponse request with arbitrary body returning *PutApiV4GroupsIdBadgesBadgeIdResponse
func (c *ClientWithResponses) PutApiV4GroupsIdBadgesBadgeIdWithBodyWithResponse(ctx context.Context, id string, badgeId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdBadgesBadgeIdResponse, error) {
	rsp, err := c.PutApiV4GroupsIdBadgesBadgeIdWithBody(ctx, id, badgeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdBadgesBadgeIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV4GroupsIdBadgesBadgeIdWithResponse(ctx context.Context, id string, badgeId int32, body PutApiV4GroupsIdBadgesBadgeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdBadgesBadgeIdResponse, error) {
	rsp, err := c.PutApiV4GroupsIdBadgesBadgeId(ctx, id, badgeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdBadgesBadgeIdResponse(rsp)
}

// GetApiV4MetadataWithResponse request returning *GetApiV4MetadataResponse
func (c *ClientWithResponses) GetApiV4MetadataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV4MetadataResponse, error) {
	rsp, err := c.GetApiV4Metadata(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4MetadataResponse(rsp)
}

// GetApiV4ProjectsIdAccessRequestsWithResponse request returning *GetApiV4ProjectsIdAccessRequestsResponse
func (c *ClientWithResponses) GetApiV4ProjectsIdAccessRequestsWithResponse(ctx context.Context, id string, params *GetApiV4ProjectsIdAccessRequestsParams, reqEditors ...RequestEditorFn) (*GetApiV4ProjectsIdAccessRequestsResponse, error) {
	rsp, err := c.GetApiV4ProjectsIdAccessRequests(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4ProjectsIdAccessRequestsResponse(rsp)
}

// PostApiV4ProjectsIdAccessRequestsWithResponse request returning *PostApiV4ProjectsIdAccessRequestsResponse
func (c *ClientWithResponses) PostApiV4ProjectsIdAccessRequestsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostApiV4ProjectsIdAccessRequestsResponse, error) {
	rsp, err := c.PostApiV4ProjectsIdAccessRequests(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4ProjectsIdAccessRequestsResponse(rsp)
}

// DeleteApiV4ProjectsIdAccessRequestsUserIdWithResponse request returning *DeleteApiV4ProjectsIdAccessRequestsUserIdResponse
func (c *ClientWithResponses) DeleteApiV4ProjectsIdAccessRequestsUserIdWithResponse(ctx context.Context, id string, userId int32, reqEditors ...RequestEditorFn) (*DeleteApiV4ProjectsIdAccessRequestsUserIdResponse, error) {
	rsp, err := c.DeleteApiV4ProjectsIdAccessRequestsUserId(ctx, id, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4ProjectsIdAccessRequestsUserIdResponse(rsp)
}

// PutApiV4ProjectsIdAccessRequestsUserIdApproveWithBodyWithResponse request with arbitrary body returning *PutApiV4ProjectsIdAccessRequestsUserIdApproveResponse
func (c *ClientWithResponses) PutApiV4ProjectsIdAccessRequestsUserIdApproveWithBodyWithResponse(ctx context.Context, id string, userId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4ProjectsIdAccessRequestsUserIdApproveResponse, error) {
	rsp, err := c.PutApiV4ProjectsIdAccessRequestsUserIdApproveWithBody(ctx, id, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4ProjectsIdAccessRequestsUserIdApproveResponse(rsp)
}

func (c *ClientWithResponses) PutApiV4ProjectsIdAccessRequestsUserIdApproveWithResponse(ctx context.Context, id string, userId int32, body PutApiV4ProjectsIdAccessRequestsUserIdApproveJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4ProjectsIdAccessRequestsUserIdApproveResponse, error) {
	rsp, err := c.PutApiV4ProjectsIdAccessRequestsUserIdApprove(ctx, id, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4ProjectsIdAccessRequestsUserIdApproveResponse(rsp)
}

// GetApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesWithResponse request returning *GetApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesResponse
func (c *ClientWithResponses) GetApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesWithResponse(ctx context.Context, id string, alertIid int32, reqEditors ...RequestEditorFn) (*GetApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesResponse, error) {
	rsp, err := c.GetApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImages(ctx, id, alertIid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesResponse(rsp)
}

// PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesWithBodyWithResponse request with arbitrary body returning *PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesResponse
func (c *ClientWithResponses) PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesWithBodyWithResponse(ctx context.Context, id string, alertIid int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesResponse, error) {
	rsp, err := c.PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesWithBody(ctx, id, alertIid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesResponse(rsp)
}

// PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesAuthorizeWithResponse request returning *PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesAuthorizeResponse
func (c *ClientWithResponses) PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesAuthorizeWithResponse(ctx context.Context, id string, alertIid int32, reqEditors ...RequestEditorFn) (*PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesAuthorizeResponse, error) {
	rsp, err := c.PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesAuthorize(ctx, id, alertIid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesAuthorizeResponse(rsp)
}

// DeleteApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdWithResponse request returning *DeleteApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdResponse
func (c *ClientWithResponses) DeleteApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdWithResponse(ctx context.Context, id string, alertIid int32, metricImageId int32, reqEditors ...RequestEditorFn) (*DeleteApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdResponse, error) {
	rsp, err := c.DeleteApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageId(ctx, id, alertIid, metricImageId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdResponse(rsp)
}

// PutApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdWithBodyWithResponse request with arbitrary body returning *PutApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdResponse
func (c *ClientWithResponses) PutApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdWithBodyWithResponse(ctx context.Context, id string, alertIid int32, metricImageId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdResponse, error) {
	rsp, err := c.PutApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdWithBody(ctx, id, alertIid, metricImageId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdResponse(rsp)
}

// GetApiV4ProjectsIdBadgesWithResponse request returning *GetApiV4ProjectsIdBadgesResponse
func (c *ClientWithResponses) GetApiV4ProjectsIdBadgesWithResponse(ctx context.Context, id string, params *GetApiV4ProjectsIdBadgesParams, reqEditors ...RequestEditorFn) (*GetApiV4ProjectsIdBadgesResponse, error) {
	rsp, err := c.GetApiV4ProjectsIdBadges(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4ProjectsIdBadgesResponse(rsp)
}

// PostApiV4ProjectsIdBadgesWithBodyWithResponse request with arbitrary body returning *PostApiV4ProjectsIdBadgesResponse
func (c *ClientWithResponses) PostApiV4ProjectsIdBadgesWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4ProjectsIdBadgesResponse, error) {
	rsp, err := c.PostApiV4ProjectsIdBadgesWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4ProjectsIdBadgesResponse(rsp)
}

func (c *ClientWithResponses) PostApiV4ProjectsIdBadgesWithResponse(ctx context.Context, id string, body PostApiV4ProjectsIdBadgesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4ProjectsIdBadgesResponse, error) {
	rsp, err := c.PostApiV4ProjectsIdBadges(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4ProjectsIdBadgesResponse(rsp)
}

// GetApiV4ProjectsIdBadgesRenderWithResponse request returning *GetApiV4ProjectsIdBadgesRenderResponse
func (c *ClientWithResponses) GetApiV4ProjectsIdBadgesRenderWithResponse(ctx context.Context, id string, params *GetApiV4ProjectsIdBadgesRenderParams, reqEditors ...RequestEditorFn) (*GetApiV4ProjectsIdBadgesRenderResponse, error) {
	rsp, err := c.GetApiV4ProjectsIdBadgesRender(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4ProjectsIdBadgesRenderResponse(rsp)
}

// DeleteApiV4ProjectsIdBadgesBadgeIdWithResponse request returning *DeleteApiV4ProjectsIdBadgesBadgeIdResponse
func (c *ClientWithResponses) DeleteApiV4ProjectsIdBadgesBadgeIdWithResponse(ctx context.Context, id string, badgeId int32, reqEditors ...RequestEditorFn) (*DeleteApiV4ProjectsIdBadgesBadgeIdResponse, error) {
	rsp, err := c.DeleteApiV4ProjectsIdBadgesBadgeId(ctx, id, badgeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4ProjectsIdBadgesBadgeIdResponse(rsp)
}

// GetApiV4ProjectsIdBadgesBadgeIdWithResponse request returning *GetApiV4ProjectsIdBadgesBadgeIdResponse
func (c *ClientWithResponses) GetApiV4ProjectsIdBadgesBadgeIdWithResponse(ctx context.Context, id string, badgeId int32, reqEditors ...RequestEditorFn) (*GetApiV4ProjectsIdBadgesBadgeIdResponse, error) {
	rsp, err := c.GetApiV4ProjectsIdBadgesBadgeId(ctx, id, badgeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4ProjectsIdBadgesBadgeIdResponse(rsp)
}

// PutApiV4ProjectsIdBadgesBadgeIdWithBodyWithResponse request with arbitrary body returning *PutApiV4ProjectsIdBadgesBadgeIdResponse
func (c *ClientWithResponses) PutApiV4ProjectsIdBadgesBadgeIdWithBodyWithResponse(ctx context.Context, id string, badgeId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4ProjectsIdBadgesBadgeIdResponse, error) {
	rsp, err := c.PutApiV4ProjectsIdBadgesBadgeIdWithBody(ctx, id, badgeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4ProjectsIdBadgesBadgeIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV4ProjectsIdBadgesBadgeIdWithResponse(ctx context.Context, id string, badgeId int32, body PutApiV4ProjectsIdBadgesBadgeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4ProjectsIdBadgesBadgeIdResponse, error) {
	rsp, err := c.PutApiV4ProjectsIdBadgesBadgeId(ctx, id, badgeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4ProjectsIdBadgesBadgeIdResponse(rsp)
}

// GetApiV4ProjectsIdRepositoryBranchesWithResponse request returning *GetApiV4ProjectsIdRepositoryBranchesResponse
func (c *ClientWithResponses) GetApiV4ProjectsIdRepositoryBranchesWithResponse(ctx context.Context, id string, params *GetApiV4ProjectsIdRepositoryBranchesParams, reqEditors ...RequestEditorFn) (*GetApiV4ProjectsIdRepositoryBranchesResponse, error) {
	rsp, err := c.GetApiV4ProjectsIdRepositoryBranches(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4ProjectsIdRepositoryBranchesResponse(rsp)
}

// PostApiV4ProjectsIdRepositoryBranchesWithBodyWithResponse request with arbitrary body returning *PostApiV4ProjectsIdRepositoryBranchesResponse
func (c *ClientWithResponses) PostApiV4ProjectsIdRepositoryBranchesWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4ProjectsIdRepositoryBranchesResponse, error) {
	rsp, err := c.PostApiV4ProjectsIdRepositoryBranchesWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4ProjectsIdRepositoryBranchesResponse(rsp)
}

func (c *ClientWithResponses) PostApiV4ProjectsIdRepositoryBranchesWithResponse(ctx context.Context, id string, body PostApiV4ProjectsIdRepositoryBranchesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4ProjectsIdRepositoryBranchesResponse, error) {
	rsp, err := c.PostApiV4ProjectsIdRepositoryBranches(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4ProjectsIdRepositoryBranchesResponse(rsp)
}

// DeleteApiV4ProjectsIdRepositoryBranchesBranchWithResponse request returning *DeleteApiV4ProjectsIdRepositoryBranchesBranchResponse
func (c *ClientWithResponses) DeleteApiV4ProjectsIdRepositoryBranchesBranchWithResponse(ctx context.Context, id string, branch string, reqEditors ...RequestEditorFn) (*DeleteApiV4ProjectsIdRepositoryBranchesBranchResponse, error) {
	rsp, err := c.DeleteApiV4ProjectsIdRepositoryBranchesBranch(ctx, id, branch, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4ProjectsIdRepositoryBranchesBranchResponse(rsp)
}

// GetApiV4ProjectsIdRepositoryBranchesBranchWithResponse request returning *GetApiV4ProjectsIdRepositoryBranchesBranchResponse
func (c *ClientWithResponses) GetApiV4ProjectsIdRepositoryBranchesBranchWithResponse(ctx context.Context, id string, branch int32, reqEditors ...RequestEditorFn) (*GetApiV4ProjectsIdRepositoryBranchesBranchResponse, error) {
	rsp, err := c.GetApiV4ProjectsIdRepositoryBranchesBranch(ctx, id, branch, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4ProjectsIdRepositoryBranchesBranchResponse(rsp)
}

// HeadApiV4ProjectsIdRepositoryBranchesBranchWithResponse request returning *HeadApiV4ProjectsIdRepositoryBranchesBranchResponse
func (c *ClientWithResponses) HeadApiV4ProjectsIdRepositoryBranchesBranchWithResponse(ctx context.Context, id string, branch string, reqEditors ...RequestEditorFn) (*HeadApiV4ProjectsIdRepositoryBranchesBranchResponse, error) {
	rsp, err := c.HeadApiV4ProjectsIdRepositoryBranchesBranch(ctx, id, branch, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHeadApiV4ProjectsIdRepositoryBranchesBranchResponse(rsp)
}

// PutApiV4ProjectsIdRepositoryBranchesBranchProtectWithBodyWithResponse request with arbitrary body returning *PutApiV4ProjectsIdRepositoryBranchesBranchProtectResponse
func (c *ClientWithResponses) PutApiV4ProjectsIdRepositoryBranchesBranchProtectWithBodyWithResponse(ctx context.Context, id string, branch string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4ProjectsIdRepositoryBranchesBranchProtectResponse, error) {
	rsp, err := c.PutApiV4ProjectsIdRepositoryBranchesBranchProtectWithBody(ctx, id, branch, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4ProjectsIdRepositoryBranchesBranchProtectResponse(rsp)
}

func (c *ClientWithResponses) PutApiV4ProjectsIdRepositoryBranchesBranchProtectWithResponse(ctx context.Context, id string, branch string, body PutApiV4ProjectsIdRepositoryBranchesBranchProtectJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4ProjectsIdRepositoryBranchesBranchProtectResponse, error) {
	rsp, err := c.PutApiV4ProjectsIdRepositoryBranchesBranchProtect(ctx, id, branch, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4ProjectsIdRepositoryBranchesBranchProtectResponse(rsp)
}

// PutApiV4ProjectsIdRepositoryBranchesBranchUnprotectWithResponse request returning *PutApiV4ProjectsIdRepositoryBranchesBranchUnprotectResponse
func (c *ClientWithResponses) PutApiV4ProjectsIdRepositoryBranchesBranchUnprotectWithResponse(ctx context.Context, id string, branch string, reqEditors ...RequestEditorFn) (*PutApiV4ProjectsIdRepositoryBranchesBranchUnprotectResponse, error) {
	rsp, err := c.PutApiV4ProjectsIdRepositoryBranchesBranchUnprotect(ctx, id, branch, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4ProjectsIdRepositoryBranchesBranchUnprotectResponse(rsp)
}

// DeleteApiV4ProjectsIdRepositoryMergedBranchesWithResponse request returning *DeleteApiV4ProjectsIdRepositoryMergedBranchesResponse
func (c *ClientWithResponses) DeleteApiV4ProjectsIdRepositoryMergedBranchesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteApiV4ProjectsIdRepositoryMergedBranchesResponse, error) {
	rsp, err := c.DeleteApiV4ProjectsIdRepositoryMergedBranches(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4ProjectsIdRepositoryMergedBranchesResponse(rsp)
}

// GetApiV4VersionWithResponse request returning *GetApiV4VersionResponse
func (c *ClientWithResponses) GetApiV4VersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV4VersionResponse, error) {
	rsp, err := c.GetApiV4Version(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4VersionResponse(rsp)
}

// ParseGetApiV4AdminBatchedBackgroundMigrationsResponse parses an HTTP response from a GetApiV4AdminBatchedBackgroundMigrationsWithResponse call
func ParseGetApiV4AdminBatchedBackgroundMigrationsResponse(rsp *http.Response) (*GetApiV4AdminBatchedBackgroundMigrationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4AdminBatchedBackgroundMigrationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []APIEntitiesBatchedBackgroundMigration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV4AdminBatchedBackgroundMigrationsIdResponse parses an HTTP response from a GetApiV4AdminBatchedBackgroundMigrationsIdWithResponse call
func ParseGetApiV4AdminBatchedBackgroundMigrationsIdResponse(rsp *http.Response) (*GetApiV4AdminBatchedBackgroundMigrationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4AdminBatchedBackgroundMigrationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesBatchedBackgroundMigration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiV4AdminBatchedBackgroundMigrationsIdPauseResponse parses an HTTP response from a PutApiV4AdminBatchedBackgroundMigrationsIdPauseWithResponse call
func ParsePutApiV4AdminBatchedBackgroundMigrationsIdPauseResponse(rsp *http.Response) (*PutApiV4AdminBatchedBackgroundMigrationsIdPauseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4AdminBatchedBackgroundMigrationsIdPauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesBatchedBackgroundMigration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiV4AdminBatchedBackgroundMigrationsIdResumeResponse parses an HTTP response from a PutApiV4AdminBatchedBackgroundMigrationsIdResumeWithResponse call
func ParsePutApiV4AdminBatchedBackgroundMigrationsIdResumeResponse(rsp *http.Response) (*PutApiV4AdminBatchedBackgroundMigrationsIdResumeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4AdminBatchedBackgroundMigrationsIdResumeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesBatchedBackgroundMigration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV4AdminCiVariablesResponse parses an HTTP response from a GetApiV4AdminCiVariablesWithResponse call
func ParseGetApiV4AdminCiVariablesResponse(rsp *http.Response) (*GetApiV4AdminCiVariablesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4AdminCiVariablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesCiVariable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV4AdminCiVariablesResponse parses an HTTP response from a PostApiV4AdminCiVariablesWithResponse call
func ParsePostApiV4AdminCiVariablesResponse(rsp *http.Response) (*PostApiV4AdminCiVariablesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4AdminCiVariablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest APIEntitiesCiVariable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteApiV4AdminCiVariablesKeyResponse parses an HTTP response from a DeleteApiV4AdminCiVariablesKeyWithResponse call
func ParseDeleteApiV4AdminCiVariablesKeyResponse(rsp *http.Response) (*DeleteApiV4AdminCiVariablesKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4AdminCiVariablesKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest APIEntitiesCiVariable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	}

	return response, nil
}

// ParseGetApiV4AdminCiVariablesKeyResponse parses an HTTP response from a GetApiV4AdminCiVariablesKeyWithResponse call
func ParseGetApiV4AdminCiVariablesKeyResponse(rsp *http.Response) (*GetApiV4AdminCiVariablesKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4AdminCiVariablesKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesCiVariable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiV4AdminCiVariablesKeyResponse parses an HTTP response from a PutApiV4AdminCiVariablesKeyWithResponse call
func ParsePutApiV4AdminCiVariablesKeyResponse(rsp *http.Response) (*PutApiV4AdminCiVariablesKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4AdminCiVariablesKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesCiVariable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV4AdminClustersResponse parses an HTTP response from a GetApiV4AdminClustersWithResponse call
func ParseGetApiV4AdminClustersResponse(rsp *http.Response) (*GetApiV4AdminClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4AdminClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []APIEntitiesCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV4AdminClustersAddResponse parses an HTTP response from a PostApiV4AdminClustersAddWithResponse call
func ParsePostApiV4AdminClustersAddResponse(rsp *http.Response) (*PostApiV4AdminClustersAddResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4AdminClustersAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest APIEntitiesCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteApiV4AdminClustersClusterIdResponse parses an HTTP response from a DeleteApiV4AdminClustersClusterIdWithResponse call
func ParseDeleteApiV4AdminClustersClusterIdResponse(rsp *http.Response) (*DeleteApiV4AdminClustersClusterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4AdminClustersClusterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest APIEntitiesCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	}

	return response, nil
}

// ParseGetApiV4AdminClustersClusterIdResponse parses an HTTP response from a GetApiV4AdminClustersClusterIdWithResponse call
func ParseGetApiV4AdminClustersClusterIdResponse(rsp *http.Response) (*GetApiV4AdminClustersClusterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4AdminClustersClusterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiV4AdminClustersClusterIdResponse parses an HTTP response from a PutApiV4AdminClustersClusterIdWithResponse call
func ParsePutApiV4AdminClustersClusterIdResponse(rsp *http.Response) (*PutApiV4AdminClustersClusterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4AdminClustersClusterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableNameResponse parses an HTTP response from a GetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableNameWithResponse call
func ParseGetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableNameResponse(rsp *http.Response) (*GetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4AdminDatabasesDatabaseNameDictionaryTablesTableNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesDictionaryTable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV4AdminMigrationsTimestampMarkResponse parses an HTTP response from a PostApiV4AdminMigrationsTimestampMarkWithResponse call
func ParsePostApiV4AdminMigrationsTimestampMarkResponse(rsp *http.Response) (*PostApiV4AdminMigrationsTimestampMarkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4AdminMigrationsTimestampMarkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV4ApplicationAppearanceResponse parses an HTTP response from a GetApiV4ApplicationAppearanceWithResponse call
func ParseGetApiV4ApplicationAppearanceResponse(rsp *http.Response) (*GetApiV4ApplicationAppearanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4ApplicationAppearanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesAppearance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiV4ApplicationAppearanceResponse parses an HTTP response from a PutApiV4ApplicationAppearanceWithResponse call
func ParsePutApiV4ApplicationAppearanceResponse(rsp *http.Response) (*PutApiV4ApplicationAppearanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4ApplicationAppearanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesAppearance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV4ApplicationPlanLimitsResponse parses an HTTP response from a GetApiV4ApplicationPlanLimitsWithResponse call
func ParseGetApiV4ApplicationPlanLimitsResponse(rsp *http.Response) (*GetApiV4ApplicationPlanLimitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4ApplicationPlanLimitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesPlanLimit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiV4ApplicationPlanLimitsResponse parses an HTTP response from a PutApiV4ApplicationPlanLimitsWithResponse call
func ParsePutApiV4ApplicationPlanLimitsResponse(rsp *http.Response) (*PutApiV4ApplicationPlanLimitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4ApplicationPlanLimitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesPlanLimit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV4ApplicationsResponse parses an HTTP response from a GetApiV4ApplicationsWithResponse call
func ParseGetApiV4ApplicationsResponse(rsp *http.Response) (*GetApiV4ApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4ApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []APIEntitiesApplication
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV4ApplicationsResponse parses an HTTP response from a PostApiV4ApplicationsWithResponse call
func ParsePostApiV4ApplicationsResponse(rsp *http.Response) (*PostApiV4ApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4ApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesApplicationWithSecret
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiV4ApplicationsIdResponse parses an HTTP response from a DeleteApiV4ApplicationsIdWithResponse call
func ParseDeleteApiV4ApplicationsIdResponse(rsp *http.Response) (*DeleteApiV4ApplicationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4ApplicationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV4AvatarResponse parses an HTTP response from a GetApiV4AvatarWithResponse call
func ParseGetApiV4AvatarResponse(rsp *http.Response) (*GetApiV4AvatarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4AvatarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesAvatar
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV4BroadcastMessagesResponse parses an HTTP response from a GetApiV4BroadcastMessagesWithResponse call
func ParseGetApiV4BroadcastMessagesResponse(rsp *http.Response) (*GetApiV4BroadcastMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4BroadcastMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesBroadcastMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV4BroadcastMessagesResponse parses an HTTP response from a PostApiV4BroadcastMessagesWithResponse call
func ParsePostApiV4BroadcastMessagesResponse(rsp *http.Response) (*PostApiV4BroadcastMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4BroadcastMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest APIEntitiesBroadcastMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteApiV4BroadcastMessagesIdResponse parses an HTTP response from a DeleteApiV4BroadcastMessagesIdWithResponse call
func ParseDeleteApiV4BroadcastMessagesIdResponse(rsp *http.Response) (*DeleteApiV4BroadcastMessagesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4BroadcastMessagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesBroadcastMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV4BroadcastMessagesIdResponse parses an HTTP response from a GetApiV4BroadcastMessagesIdWithResponse call
func ParseGetApiV4BroadcastMessagesIdResponse(rsp *http.Response) (*GetApiV4BroadcastMessagesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4BroadcastMessagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesBroadcastMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiV4BroadcastMessagesIdResponse parses an HTTP response from a PutApiV4BroadcastMessagesIdWithResponse call
func ParsePutApiV4BroadcastMessagesIdResponse(rsp *http.Response) (*PutApiV4BroadcastMessagesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4BroadcastMessagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesBroadcastMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV4BulkImportsResponse parses an HTTP response from a GetApiV4BulkImportsWithResponse call
func ParseGetApiV4BulkImportsResponse(rsp *http.Response) (*GetApiV4BulkImportsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4BulkImportsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []APIEntitiesBulkImport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV4BulkImportsResponse parses an HTTP response from a PostApiV4BulkImportsWithResponse call
func ParsePostApiV4BulkImportsResponse(rsp *http.Response) (*PostApiV4BulkImportsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4BulkImportsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesBulkImport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV4BulkImportsEntitiesResponse parses an HTTP response from a GetApiV4BulkImportsEntitiesWithResponse call
func ParseGetApiV4BulkImportsEntitiesResponse(rsp *http.Response) (*GetApiV4BulkImportsEntitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4BulkImportsEntitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []APIEntitiesBulkImports
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV4BulkImportsImportIdResponse parses an HTTP response from a GetApiV4BulkImportsImportIdWithResponse call
func ParseGetApiV4BulkImportsImportIdResponse(rsp *http.Response) (*GetApiV4BulkImportsImportIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4BulkImportsImportIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesBulkImport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV4BulkImportsImportIdEntitiesResponse parses an HTTP response from a GetApiV4BulkImportsImportIdEntitiesWithResponse call
func ParseGetApiV4BulkImportsImportIdEntitiesResponse(rsp *http.Response) (*GetApiV4BulkImportsImportIdEntitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4BulkImportsImportIdEntitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []APIEntitiesBulkImports
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV4BulkImportsImportIdEntitiesEntityIdResponse parses an HTTP response from a GetApiV4BulkImportsImportIdEntitiesEntityIdWithResponse call
func ParseGetApiV4BulkImportsImportIdEntitiesEntityIdResponse(rsp *http.Response) (*GetApiV4BulkImportsImportIdEntitiesEntityIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4BulkImportsImportIdEntitiesEntityIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesBulkImports
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV4GroupsIdAccessRequestsResponse parses an HTTP response from a GetApiV4GroupsIdAccessRequestsWithResponse call
func ParseGetApiV4GroupsIdAccessRequestsResponse(rsp *http.Response) (*GetApiV4GroupsIdAccessRequestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdAccessRequestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesAccessRequester
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV4GroupsIdAccessRequestsResponse parses an HTTP response from a PostApiV4GroupsIdAccessRequestsWithResponse call
func ParsePostApiV4GroupsIdAccessRequestsResponse(rsp *http.Response) (*PostApiV4GroupsIdAccessRequestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdAccessRequestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesAccessRequester
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (successfull_response) unsupported

	}

	return response, nil
}

// ParseDeleteApiV4GroupsIdAccessRequestsUserIdResponse parses an HTTP response from a DeleteApiV4GroupsIdAccessRequestsUserIdWithResponse call
func ParseDeleteApiV4GroupsIdAccessRequestsUserIdResponse(rsp *http.Response) (*DeleteApiV4GroupsIdAccessRequestsUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4GroupsIdAccessRequestsUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiV4GroupsIdAccessRequestsUserIdApproveResponse parses an HTTP response from a PutApiV4GroupsIdAccessRequestsUserIdApproveWithResponse call
func ParsePutApiV4GroupsIdAccessRequestsUserIdApproveResponse(rsp *http.Response) (*PutApiV4GroupsIdAccessRequestsUserIdApproveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdAccessRequestsUserIdApproveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesAccessRequester
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (successfull_response) unsupported

	}

	return response, nil
}

// ParseGetApiV4GroupsIdBadgesResponse parses an HTTP response from a GetApiV4GroupsIdBadgesWithResponse call
func ParseGetApiV4GroupsIdBadgesResponse(rsp *http.Response) (*GetApiV4GroupsIdBadgesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdBadgesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []APIEntitiesBadge
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV4GroupsIdBadgesResponse parses an HTTP response from a PostApiV4GroupsIdBadgesWithResponse call
func ParsePostApiV4GroupsIdBadgesResponse(rsp *http.Response) (*PostApiV4GroupsIdBadgesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdBadgesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest APIEntitiesBadge
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetApiV4GroupsIdBadgesRenderResponse parses an HTTP response from a GetApiV4GroupsIdBadgesRenderWithResponse call
func ParseGetApiV4GroupsIdBadgesRenderResponse(rsp *http.Response) (*GetApiV4GroupsIdBadgesRenderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdBadgesRenderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesBasicBadgeDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiV4GroupsIdBadgesBadgeIdResponse parses an HTTP response from a DeleteApiV4GroupsIdBadgesBadgeIdWithResponse call
func ParseDeleteApiV4GroupsIdBadgesBadgeIdResponse(rsp *http.Response) (*DeleteApiV4GroupsIdBadgesBadgeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4GroupsIdBadgesBadgeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV4GroupsIdBadgesBadgeIdResponse parses an HTTP response from a GetApiV4GroupsIdBadgesBadgeIdWithResponse call
func ParseGetApiV4GroupsIdBadgesBadgeIdResponse(rsp *http.Response) (*GetApiV4GroupsIdBadgesBadgeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdBadgesBadgeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesBadge
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiV4GroupsIdBadgesBadgeIdResponse parses an HTTP response from a PutApiV4GroupsIdBadgesBadgeIdWithResponse call
func ParsePutApiV4GroupsIdBadgesBadgeIdResponse(rsp *http.Response) (*PutApiV4GroupsIdBadgesBadgeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdBadgesBadgeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesBadge
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV4MetadataResponse parses an HTTP response from a GetApiV4MetadataWithResponse call
func ParseGetApiV4MetadataResponse(rsp *http.Response) (*GetApiV4MetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4MetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV4ProjectsIdAccessRequestsResponse parses an HTTP response from a GetApiV4ProjectsIdAccessRequestsWithResponse call
func ParseGetApiV4ProjectsIdAccessRequestsResponse(rsp *http.Response) (*GetApiV4ProjectsIdAccessRequestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4ProjectsIdAccessRequestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesAccessRequester
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV4ProjectsIdAccessRequestsResponse parses an HTTP response from a PostApiV4ProjectsIdAccessRequestsWithResponse call
func ParsePostApiV4ProjectsIdAccessRequestsResponse(rsp *http.Response) (*PostApiV4ProjectsIdAccessRequestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4ProjectsIdAccessRequestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesAccessRequester
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (successfull_response) unsupported

	}

	return response, nil
}

// ParseDeleteApiV4ProjectsIdAccessRequestsUserIdResponse parses an HTTP response from a DeleteApiV4ProjectsIdAccessRequestsUserIdWithResponse call
func ParseDeleteApiV4ProjectsIdAccessRequestsUserIdResponse(rsp *http.Response) (*DeleteApiV4ProjectsIdAccessRequestsUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4ProjectsIdAccessRequestsUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiV4ProjectsIdAccessRequestsUserIdApproveResponse parses an HTTP response from a PutApiV4ProjectsIdAccessRequestsUserIdApproveWithResponse call
func ParsePutApiV4ProjectsIdAccessRequestsUserIdApproveResponse(rsp *http.Response) (*PutApiV4ProjectsIdAccessRequestsUserIdApproveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4ProjectsIdAccessRequestsUserIdApproveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesAccessRequester
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (successfull_response) unsupported

	}

	return response, nil
}

// ParseGetApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesResponse parses an HTTP response from a GetApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesWithResponse call
func ParseGetApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesResponse(rsp *http.Response) (*GetApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []APIEntitiesMetricImage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesResponse parses an HTTP response from a PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesWithResponse call
func ParsePostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesResponse(rsp *http.Response) (*PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesMetricImage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesAuthorizeResponse parses an HTTP response from a PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesAuthorizeWithResponse call
func ParsePostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesAuthorizeResponse(rsp *http.Response) (*PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesAuthorizeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesAuthorizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdResponse parses an HTTP response from a DeleteApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdWithResponse call
func ParseDeleteApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdResponse(rsp *http.Response) (*DeleteApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest APIEntitiesMetricImage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	}

	return response, nil
}

// ParsePutApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdResponse parses an HTTP response from a PutApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdWithResponse call
func ParsePutApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdResponse(rsp *http.Response) (*PutApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesMetricImage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV4ProjectsIdBadgesResponse parses an HTTP response from a GetApiV4ProjectsIdBadgesWithResponse call
func ParseGetApiV4ProjectsIdBadgesResponse(rsp *http.Response) (*GetApiV4ProjectsIdBadgesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4ProjectsIdBadgesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []APIEntitiesBadge
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV4ProjectsIdBadgesResponse parses an HTTP response from a PostApiV4ProjectsIdBadgesWithResponse call
func ParsePostApiV4ProjectsIdBadgesResponse(rsp *http.Response) (*PostApiV4ProjectsIdBadgesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4ProjectsIdBadgesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest APIEntitiesBadge
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetApiV4ProjectsIdBadgesRenderResponse parses an HTTP response from a GetApiV4ProjectsIdBadgesRenderWithResponse call
func ParseGetApiV4ProjectsIdBadgesRenderResponse(rsp *http.Response) (*GetApiV4ProjectsIdBadgesRenderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4ProjectsIdBadgesRenderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesBasicBadgeDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiV4ProjectsIdBadgesBadgeIdResponse parses an HTTP response from a DeleteApiV4ProjectsIdBadgesBadgeIdWithResponse call
func ParseDeleteApiV4ProjectsIdBadgesBadgeIdResponse(rsp *http.Response) (*DeleteApiV4ProjectsIdBadgesBadgeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4ProjectsIdBadgesBadgeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV4ProjectsIdBadgesBadgeIdResponse parses an HTTP response from a GetApiV4ProjectsIdBadgesBadgeIdWithResponse call
func ParseGetApiV4ProjectsIdBadgesBadgeIdResponse(rsp *http.Response) (*GetApiV4ProjectsIdBadgesBadgeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4ProjectsIdBadgesBadgeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesBadge
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiV4ProjectsIdBadgesBadgeIdResponse parses an HTTP response from a PutApiV4ProjectsIdBadgesBadgeIdWithResponse call
func ParsePutApiV4ProjectsIdBadgesBadgeIdResponse(rsp *http.Response) (*PutApiV4ProjectsIdBadgesBadgeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4ProjectsIdBadgesBadgeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesBadge
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV4ProjectsIdRepositoryBranchesResponse parses an HTTP response from a GetApiV4ProjectsIdRepositoryBranchesWithResponse call
func ParseGetApiV4ProjectsIdRepositoryBranchesResponse(rsp *http.Response) (*GetApiV4ProjectsIdRepositoryBranchesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4ProjectsIdRepositoryBranchesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []APIEntitiesBranch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV4ProjectsIdRepositoryBranchesResponse parses an HTTP response from a PostApiV4ProjectsIdRepositoryBranchesWithResponse call
func ParsePostApiV4ProjectsIdRepositoryBranchesResponse(rsp *http.Response) (*PostApiV4ProjectsIdRepositoryBranchesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4ProjectsIdRepositoryBranchesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest APIEntitiesBranch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteApiV4ProjectsIdRepositoryBranchesBranchResponse parses an HTTP response from a DeleteApiV4ProjectsIdRepositoryBranchesBranchWithResponse call
func ParseDeleteApiV4ProjectsIdRepositoryBranchesBranchResponse(rsp *http.Response) (*DeleteApiV4ProjectsIdRepositoryBranchesBranchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4ProjectsIdRepositoryBranchesBranchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV4ProjectsIdRepositoryBranchesBranchResponse parses an HTTP response from a GetApiV4ProjectsIdRepositoryBranchesBranchWithResponse call
func ParseGetApiV4ProjectsIdRepositoryBranchesBranchResponse(rsp *http.Response) (*GetApiV4ProjectsIdRepositoryBranchesBranchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4ProjectsIdRepositoryBranchesBranchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesBranch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHeadApiV4ProjectsIdRepositoryBranchesBranchResponse parses an HTTP response from a HeadApiV4ProjectsIdRepositoryBranchesBranchWithResponse call
func ParseHeadApiV4ProjectsIdRepositoryBranchesBranchResponse(rsp *http.Response) (*HeadApiV4ProjectsIdRepositoryBranchesBranchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HeadApiV4ProjectsIdRepositoryBranchesBranchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiV4ProjectsIdRepositoryBranchesBranchProtectResponse parses an HTTP response from a PutApiV4ProjectsIdRepositoryBranchesBranchProtectWithResponse call
func ParsePutApiV4ProjectsIdRepositoryBranchesBranchProtectResponse(rsp *http.Response) (*PutApiV4ProjectsIdRepositoryBranchesBranchProtectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4ProjectsIdRepositoryBranchesBranchProtectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesBranch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiV4ProjectsIdRepositoryBranchesBranchUnprotectResponse parses an HTTP response from a PutApiV4ProjectsIdRepositoryBranchesBranchUnprotectWithResponse call
func ParsePutApiV4ProjectsIdRepositoryBranchesBranchUnprotectResponse(rsp *http.Response) (*PutApiV4ProjectsIdRepositoryBranchesBranchUnprotectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4ProjectsIdRepositoryBranchesBranchUnprotectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesBranch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiV4ProjectsIdRepositoryMergedBranchesResponse parses an HTTP response from a DeleteApiV4ProjectsIdRepositoryMergedBranchesWithResponse call
func ParseDeleteApiV4ProjectsIdRepositoryMergedBranchesResponse(rsp *http.Response) (*DeleteApiV4ProjectsIdRepositoryMergedBranchesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4ProjectsIdRepositoryMergedBranchesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV4VersionResponse parses an HTTP response from a GetApiV4VersionWithResponse call
func ParseGetApiV4VersionResponse(rsp *http.Response) (*GetApiV4VersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4VersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEntitiesMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
